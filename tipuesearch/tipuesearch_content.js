var tipuesearch = {"pages":[{"title":" PLUME ","text":"PLUME Plasma in a Linear Uniform Magnetized Environment ALPS is a parallelised numerical code that solves the Vlasov-Maxwell dispersion\nrelation in hot (even relativistic) magnetised plasma. If you use the code for a science publication, please provide the code website github.com/kgklein/PLUME in the acknowledgements of your publication and cite the code paper: lorem ipsum Publications using the PLUME code can be found in our NASA ADS Library (hyper link here) For first-time users, we recommend working through our PLUME Tutorial . The key input parameters for PLUME are described on the PLUME Input page. The output format of PLUME is described on the PLUME Output page. Developer Info Kristopher Klein, Gregory Howes","tags":"home","loc":"index.html"},{"title":"sprs2_sp – PLUME ","text":"type, public :: sprs2_sp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=SP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol","tags":"","loc":"type/sprs2_sp.html"},{"title":"sprs2_dp – PLUME ","text":"type, public :: sprs2_dp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=DP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol","tags":"","loc":"type/sprs2_dp.html"},{"title":"specie – PLUME ","text":"type, public :: specie Species Input Parameters Components Type Visibility Attributes Name Initial real, public :: tau_s Relative Temperature ratio. real, public :: mu_s Relative Mass ratio. real, public :: alph_s Temperature Anisotropy. real, public :: Q_s Relative charge ratio. real, public :: D_s Density Ratio. real, public :: vv_s Relative Drift, normalized to reference Alfven velocity with .","tags":"","loc":"type/specie.html"},{"title":"scanner – PLUME ","text":"type, public :: scanner Parameters to control parameter scans. Components Type Visibility Attributes Name Initial real, public :: range_i Initial value of scanned parameter. real, public :: range_f Final value of scanned parameter. logical, public :: log_scan Linear or Logarithmic scan.\nT-> log, F-> linear scan logical, public :: heat_s Controls supplementary heating calculation.\nT-> Heating Calculation; F-> No heating calculation. logical, public :: eigen_s Controls supplementary eigenfunction calculation.\nT-> Eigenfunction calculation;   F-> No eigenfunction Calculation. logical, public :: tensor_s Controls supplementary output of susceptibility tensor.\nT-> Output tensor; F-> Supress output. integer, public :: type_s Defines nature of parameter scans.\n Style: -1- Global two component Scan:\n     Type: 0 k_0-> k_1\n           1 theta_0 -> theta_1\n           2 k_fixed angle\nStyle: 0- Global Scan:\n     Type: 0 kperp\n           1 kpar\n           2 betap\n           3 vtp\nStyle: 1-nspec-> Species Scan:\n     Type: 0 tau_s\n           1 mu_s\n           2 alph_s\n           3 Q_s\n           4 D_s\n           5 vv_s integer, public :: style_s Defines nature of parameter scan.\n-1: Global two-component scan\n 0: Global one-component\n 1 to nspec: species specific parameter scan integer, public :: n_scan Number of output steps.\nn_scan*n_res Total steps taken. integer, public :: n_res Scan resolution between output steps.\nn_scan*n_res Total steps taken. real, public :: diff Step size for scanned parameter.\n Either (swf-swi)/(n_scan n_res)\n or\n (log10(swf)-log10(swi))/(n_scan n_res).","tags":"","loc":"type/scanner.html"},{"title":"poly_rr – PLUME","text":"public  function poly_rr(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) Called by proc~~poly_rr~~CalledByGraph proc~poly_rr poly_rr interface~poly poly interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rrv->proc~poly_rr proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~poly_msk_rrv->proc~poly_rrv proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_rr.html"},{"title":"poly_dd – PLUME","text":"public  function poly_dd(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) Called by proc~~poly_dd~~CalledByGraph proc~poly_dd poly_dd interface~poly poly interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_ddv->proc~poly_dd proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~poly_msk_ddv->proc~poly_ddv proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_dd.html"},{"title":"poly_rc – PLUME","text":"public  function poly_rc(x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) Called by proc~~poly_rc~~CalledByGraph proc~poly_rc poly_rc interface~poly poly interface~poly->proc~poly_rc proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_rc.html"},{"title":"poly_cc – PLUME","text":"public  function poly_cc(x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) Called by proc~~poly_cc~~CalledByGraph proc~poly_cc poly_cc interface~poly poly interface~poly->proc~poly_cc proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_cc.html"},{"title":"poly_rrv – PLUME","text":"public  function poly_rrv(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) Calls proc~~poly_rrv~~CallsGraph proc~poly_rrv poly_rrv proc~poly_rr poly_rr proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_rrv~~CalledByGraph proc~poly_rrv poly_rrv interface~poly poly interface~poly->proc~poly_rrv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_msk_rrv->proc~poly_rrv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_rrv.html"},{"title":"poly_ddv – PLUME","text":"public  function poly_ddv(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) Calls proc~~poly_ddv~~CallsGraph proc~poly_ddv poly_ddv proc~poly_dd poly_dd proc~poly_ddv->proc~poly_dd Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_ddv~~CalledByGraph proc~poly_ddv poly_ddv interface~poly poly interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_ddv->proc~poly_ddv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_ddv.html"},{"title":"poly_msk_rrv – PLUME","text":"public  function poly_msk_rrv(x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) Calls proc~~poly_msk_rrv~~CallsGraph proc~poly_msk_rrv poly_msk_rrv proc~poly_rrv poly_rrv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rr poly_rr proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_msk_rrv~~CalledByGraph proc~poly_msk_rrv poly_msk_rrv interface~poly poly interface~poly->proc~poly_msk_rrv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_msk_rrv.html"},{"title":"poly_msk_ddv – PLUME","text":"public  function poly_msk_ddv(x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x)) Calls proc~~poly_msk_ddv~~CallsGraph proc~poly_msk_ddv poly_msk_ddv proc~poly_ddv poly_ddv proc~poly_msk_ddv->proc~poly_ddv proc~poly_dd poly_dd proc~poly_ddv->proc~poly_dd Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_msk_ddv~~CalledByGraph proc~poly_msk_ddv poly_msk_ddv interface~poly poly interface~poly->proc~poly_msk_ddv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poly_msk_ddv.html"},{"title":"assert1 – PLUME","text":"public  subroutine assert1(n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string Called by proc~~assert1~~CalledByGraph proc~assert1 assert1 interface~assert assert interface~assert->proc~assert1 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/assert1.html"},{"title":"assert2 – PLUME","text":"public  subroutine assert2(n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string Called by proc~~assert2~~CalledByGraph proc~assert2 assert2 interface~assert assert interface~assert->proc~assert2 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/assert2.html"},{"title":"assert3 – PLUME","text":"public  subroutine assert3(n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string Called by proc~~assert3~~CalledByGraph proc~assert3 assert3 interface~assert assert interface~assert->proc~assert3 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/assert3.html"},{"title":"assert4 – PLUME","text":"public  subroutine assert4(n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string Called by proc~~assert4~~CalledByGraph proc~assert4 assert4 interface~assert assert interface~assert->proc~assert4 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/assert4.html"},{"title":"assert_v – PLUME","text":"public  subroutine assert_v(n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string Called by proc~~assert_v~~CalledByGraph proc~assert_v assert_v interface~assert assert interface~assert->proc~assert_v proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/assert_v.html"},{"title":"assert – PLUME","text":"public interface assert Calls interface~~assert~~CallsGraph interface~assert assert proc~assert1 assert1 interface~assert->proc~assert1 proc~assert2 assert2 interface~assert->proc~assert2 proc~assert3 assert3 interface~assert->proc~assert3 proc~assert4 assert4 interface~assert->proc~assert4 proc~assert_v assert_v interface~assert->proc~assert_v Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~assert~~CalledByGraph interface~assert assert proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures public  subroutine assert1 (n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string public  subroutine assert2 (n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string public  subroutine assert3 (n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string public  subroutine assert4 (n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string public  subroutine assert_v (n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string","tags":"","loc":"interface/assert.html"},{"title":"poly – PLUME","text":"public interface poly Calls interface~~poly~~CallsGraph interface~poly poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~poly~~CalledByGraph interface~poly poly proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures public  function poly_rr (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) public  function poly_rrv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_dd (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) public  function poly_ddv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) public  function poly_rc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_cc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_msk_rrv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_msk_ddv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x))","tags":"","loc":"interface/poly.html"},{"title":"bessim0 – PLUME","text":"public  function bessim0(x) Uses nrutil_trim nrtype proc~~bessim0~~UsesGraph proc~bessim0 bessim0 module~nrtype nrtype proc~bessim0->module~nrtype module~nrutil_trim nrutil_trim proc~bessim0->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Modified Bessel Function of order zero.\nDetermines I_0(x) e&#94;(-x) instead of I_0(x)\nto avoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. Calls proc~~bessim0~~CallsGraph proc~bessim0 bessim0 interface~poly poly proc~bessim0->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessim0~~CalledByGraph proc~bessim0 bessim0 proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/bessim0.html"},{"title":"bessim1 – PLUME","text":"public  function bessim1(x) Uses nrutil_trim nrtype proc~~bessim1~~UsesGraph proc~bessim1 bessim1 module~nrtype nrtype proc~bessim1->module~nrtype module~nrutil_trim nrutil_trim proc~bessim1->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Modified Bessel Function of order one.\nDetermines I_1(x) e&#94;(-x) instead of I_1(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. Calls proc~~bessim1~~CallsGraph proc~bessim1 bessim1 interface~poly poly proc~bessim1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/bessim1.html"},{"title":"bessim – PLUME","text":"public  function bessim(n, x) Uses nrutil_trim nrtype proc~~bessim~~UsesGraph proc~bessim bessim module~nrtype nrtype proc~bessim->module~nrtype module~nrutil_trim nrutil_trim proc~bessim->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Modified Bessel Function of arbitrary order.\nDetermines I_n(x) e&#94;(-x) instead of I_n(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name integer(kind=I4B), intent(in) :: n Order of Modified Bessel Function. real(kind=SP), intent(in) :: x Order of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. Calls proc~~bessim~~CallsGraph proc~bessim bessim interface~assert assert proc~bessim->interface~assert proc~bessim0 bessim0 proc~bessim->proc~bessim0 proc~assert1 assert1 interface~assert->proc~assert1 proc~assert2 assert2 interface~assert->proc~assert2 proc~assert3 assert3 interface~assert->proc~assert3 proc~assert4 assert4 interface~assert->proc~assert4 proc~assert_v assert_v interface~assert->proc~assert_v interface~poly poly proc~bessim0->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/bessim.html"},{"title":"input_unit_exist – PLUME","text":"private  function input_unit_exist(nml, exist) Is a namelist already open? Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml logical, intent(out) :: exist Return Value integer Called by proc~~input_unit_exist~~CalledByGraph proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~input_unit_exist proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_indexed_namelist_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/input_unit_exist.html"},{"title":"input_unit – PLUME","text":"private  function input_unit(nml) Determine I/O unit. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Return Value integer Called by proc~~input_unit~~CalledByGraph proc~input_unit input_unit proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~input_unit proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_indexed_namelist_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/input_unit.html"},{"title":"read_in_params – PLUME","text":"public  subroutine read_in_params() Uses vars proc~~read_in_params~~UsesGraph proc~read_in_params read_in_params module~vars vars proc~read_in_params->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in system parameters.\nInput file is argument after executable:\n$ ./plume.e example.in Arguments None Calls proc~~read_in_params~~CallsGraph proc~read_in_params read_in_params proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_in_params->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_in_params->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_in_params->proc~get_unused_unit proc~spec_read spec_read proc~read_in_params->proc~spec_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_in_params~~CalledByGraph proc~read_in_params read_in_params program~plume plume program~plume->proc~read_in_params Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist params Variables Name Type Default Description betap real None Reference Species Parallel Thermal-to-Magnetic Pressure Ratio.\n8 pi n_ref T_ref,par/B&#94;2 kperp real None Wavenumber perpendicular to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_perp,ref/Omega_ref kpar real None Wavenumber parallel to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_t,ref,perp/Omega_ref vtp real None Parallel reference thermal velocity normalized to the speed of light.\nv_t,ref,par/c nspec integer 3 Number of species/components to be included in calculation. nscan integer 0 Number of parameter scans. option integer None Selection for the type of dispersion calculation to be undertaken.\n-1: Calculate disp(om) at a single (omega, gamma)\n 0: Calculate Roots for input plasma parameters.\n 1: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over plasma parameters, with range and type specified in .in file.\n 2: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over two-dimensional plasma parameters space,\n    with range and type specified in .in file.\n 3: deprecated\n 4: Make multiple maps of complex frequency space.\n 5: Find roots for parameters along a prescribed path\n    Path is set by solar wind models, with values calculated and\n    output by helper function (in development, the radial scan function.). nroot_max integer None Input specified nroots to follow. use_map logical None Determines method for selecting initial solutions.\nT-> Use map routine to determine solutions in defined regions of complex frequency space.\n    Map parameters determined by &maps list in .in file.\nF-> Read nroot_max initial guesses for complex frequency solutions.\n    Guesses determined by &guess_N lists in .in file. low_n logical .false. Toggle on low-n susceptibility suplementary calculation. new_low_n logical .false. Flag to use Revised low_n for LD/TTD separation. writeOut logical None Enables or suppressed output to screen. dataName character(len=100) None Data Subdirectory where output is stored. outputName character(len=100) None Common name string for output files.","tags":"","loc":"proc/read_in_params.html"},{"title":"spec_read – PLUME","text":"private  subroutine spec_read(is) Uses vars proc~~spec_read~~UsesGraph proc~spec_read spec_read module~vars vars proc~spec_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in species/component parameters. Arguments Type Intent Optional Attributes Name integer :: is Species index. Called by proc~~spec_read~~CalledByGraph proc~spec_read spec_read proc~read_in_params read_in_params proc~read_in_params->proc~spec_read program~plume plume program~plume->proc~read_in_params Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist species Variables Name Type Default Description tauS real None Parallel Temperature Ratio. muS real None Mass Ratio. alphS real None Temperature Anisotropy. Qs real None Relative charge ratio. Ds real None Density Ratio. vvS real None Relative Drift, normalized to reference Alfven velocity with .","tags":"","loc":"proc/spec_read.html"},{"title":"read_map_input – PLUME","text":"public  subroutine read_map_input() Uses vars proc~~read_map_input~~UsesGraph proc~read_map_input read_map_input module~vars vars proc~read_map_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in parameters for bounds on mapping dispersion roots.\n Invokes map_read . Arguments None Calls proc~~read_map_input~~CallsGraph proc~read_map_input read_map_input proc~get_runname get_runname proc~read_map_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_map_input->proc~get_unused_unit proc~map_read map_read proc~read_map_input->proc~map_read Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_map_input~~CalledByGraph proc~read_map_input read_map_input program~plume plume program~plume->proc~read_map_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/read_map_input.html"},{"title":"map_read – PLUME","text":"private  subroutine map_read() Uses vars proc~~map_read~~UsesGraph proc~map_read map_read module~vars vars proc~map_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in frequency limits for map search of\n complex frequency solution space. Arguments None Called by proc~~map_read~~CalledByGraph proc~map_read map_read proc~read_map_input read_map_input proc~read_map_input->proc~map_read program~plume plume program~plume->proc~read_map_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist maps Variables Name Type Default Description loggridw logical None Set log or linear spacing for real frequency axis of the map search. loggridg logical None Set log or linear spacing for imaginary frequency axis of the map search. omi real None Lower bound on real frequency map search axis. omf real None Upper bound on real frequency map search axis. gami real None Lower bound on imaginary frequency map search axis. gamf real None Upper bound on imaginary frequency map search axis. positive_roots logical .false. Consider all solutions (false) or only solutions with positive real frequencies (true).","tags":"","loc":"proc/map_read.html"},{"title":"read_scan_input – PLUME","text":"public  subroutine read_scan_input() Uses vars proc~~read_scan_input~~UsesGraph proc~read_scan_input read_scan_input module~vars vars proc~read_scan_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in limits for scans in plasma parameter space.\n Invokes scan_read . Arguments None Calls proc~~read_scan_input~~CallsGraph proc~read_scan_input read_scan_input proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_scan_input->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_scan_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_scan_input->proc~get_unused_unit proc~scan_read scan_read proc~read_scan_input->proc~scan_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_scan_input~~CalledByGraph proc~read_scan_input read_scan_input program~plume plume program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/read_scan_input.html"},{"title":"scan_read – PLUME","text":"private  subroutine scan_read(is) Uses vars proc~~scan_read~~UsesGraph proc~scan_read scan_read module~vars vars proc~scan_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in scan parameters. Arguments Type Intent Optional Attributes Name integer :: is Scan index. Called by proc~~scan_read~~CalledByGraph proc~scan_read scan_read proc~read_scan_input read_scan_input proc~read_scan_input->proc~scan_read program~plume plume program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist scan_input Variables Name Type Default Description scan_type integer None Defines kind of parameter scans. swi real None Initial value of scanned parameter. swf real None Final value of scanned parameter. swlog logical None Linear or Logarithmic scan. scan_style integer None Defines number of components of scan. ns integer None Number of output steps. nres integer None Scan resolution between output steps. heating logical None Controls supplementary heating calculation. eigen logical None Controls supplementary eigenfunction calculation. tensor logical None Controls supplementary output of susceptibility tensor.","tags":"","loc":"proc/scan_read.html"},{"title":"read_guess_input – PLUME","text":"public  subroutine read_guess_input() Uses vars proc~~read_guess_input~~UsesGraph proc~read_guess_input read_guess_input module~vars vars proc~read_guess_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in initial values for solutions.\n Invokes om_read . Arguments None Calls proc~~read_guess_input~~CallsGraph proc~read_guess_input read_guess_input proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_guess_input->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_guess_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_guess_input->proc~get_unused_unit proc~om_read om_read proc~read_guess_input->proc~om_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_guess_input~~CalledByGraph proc~read_guess_input read_guess_input program~plume plume program~plume->proc~read_guess_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/read_guess_input.html"},{"title":"om_read – PLUME","text":"private  subroutine om_read(is) Uses vars proc~~om_read~~UsesGraph proc~om_read om_read module~vars vars proc~om_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in initial guesses for complex frequencies of solutions. Arguments Type Intent Optional Attributes Name integer :: is Solution Index. Called by proc~~om_read~~CalledByGraph proc~om_read om_read proc~read_guess_input read_guess_input proc~read_guess_input->proc~om_read program~plume plume program~plume->proc~read_guess_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist guess Variables Name Type Default Description g_om real None Dummy values for real frequency component of solution. g_gam real None Dummy values for imaginary frequency component of solution.","tags":"","loc":"proc/om_read.html"},{"title":"read_radial_input – PLUME","text":"public  subroutine read_radial_input() Uses vars proc~~read_radial_input~~UsesGraph proc~read_radial_input read_radial_input module~vars vars proc~read_radial_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in parameters for radial solar wind model scan.\n(in development). Arguments None Calls proc~~read_radial_input~~CallsGraph proc~read_radial_input read_radial_input proc~get_runname get_runname proc~read_radial_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_radial_input->proc~get_unused_unit proc~radial_read radial_read proc~read_radial_input->proc~radial_read proc~radial_read_0 radial_read_0 proc~read_radial_input->proc~radial_read_0 proc~radial_read_1 radial_read_1 proc~read_radial_input->proc~radial_read_1 proc~radial_read_2 radial_read_2 proc~read_radial_input->proc~radial_read_2 proc~radial_read_3 radial_read_3 proc~read_radial_input->proc~radial_read_3 proc~radial_read_4 radial_read_4 proc~read_radial_input->proc~radial_read_4 proc~radial_read_5 radial_read_5 proc~read_radial_input->proc~radial_read_5 proc~radial_read_6 radial_read_6 proc~read_radial_input->proc~radial_read_6 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_radial_input~~CalledByGraph proc~read_radial_input read_radial_input program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/read_radial_input.html"},{"title":"radial_read – PLUME","text":"private  subroutine radial_read() Uses vars proc~~radial_read~~UsesGraph proc~radial_read radial_read module~vars vars proc~radial_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan global parameters Arguments None Called by proc~~radial_read~~CalledByGraph proc~radial_read radial_read proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist radial_input Variables Name Type Default Description nRad integer None Number of points to scan in radial models. modelName character(len=100) None Input file name for radial model radial_heating logical None radial_eigen logical None k_scan integer None Determines wavevector values to include in radial scan\n0: single point in kperp, kpar space\n1: fixed kperp, scan over kpar\n2: fixed kpar,  scan over kperp\n3: fixed theta, scan over k\n4: fixed k, scan over theta\n5: plane scan over (kperp, kpar)\n6: plane scan over (k, theta)","tags":"","loc":"proc/radial_read.html"},{"title":"radial_read_0 – PLUME","text":"private  subroutine radial_read_0() Uses vars proc~~radial_read_0~~UsesGraph proc~radial_read_0 radial_read_0 module~vars vars proc~radial_read_0->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and . Arguments None Called by proc~~radial_read_0~~CalledByGraph proc~radial_read_0 radial_read_0 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_0 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for readin.","tags":"","loc":"proc/radial_read_0.html"},{"title":"radial_read_1 – PLUME","text":"private  subroutine radial_read_1() Uses vars proc~~radial_read_1~~UsesGraph proc~radial_read_1 radial_read_1 module~vars vars proc~radial_read_1->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_1~~CalledByGraph proc~radial_read_1 radial_read_1 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_1 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"proc/radial_read_1.html"},{"title":"radial_read_2 – PLUME","text":"private  subroutine radial_read_2() Uses vars proc~~radial_read_2~~UsesGraph proc~radial_read_2 radial_read_2 module~vars vars proc~radial_read_2->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_2~~CalledByGraph proc~radial_read_2 radial_read_2 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_2 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for fixed . nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"proc/radial_read_2.html"},{"title":"radial_read_3 – PLUME","text":"private  subroutine radial_read_3() Uses vars proc~~radial_read_3~~UsesGraph proc~radial_read_3 radial_read_3 module~vars vars proc~radial_read_3->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_3~~CalledByGraph proc~radial_read_3 radial_read_3 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_3 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for fixed value (in deg.) nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"proc/radial_read_3.html"},{"title":"radial_read_4 – PLUME","text":"private  subroutine radial_read_4() Uses vars proc~~radial_read_4~~UsesGraph proc~radial_read_4 radial_read_4 module~vars vars proc~radial_read_4->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_4~~CalledByGraph proc~radial_read_4 radial_read_4 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_4 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description k_1 real None Dummy variable for fixed value. theta_1 real None Dummy variable for initial value (in deg.). theta_2 real None Dummy variable for final value (in deg.). nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"proc/radial_read_4.html"},{"title":"radial_read_5 – PLUME","text":"private  subroutine radial_read_5() Uses vars proc~~radial_read_5~~UsesGraph proc~radial_read_5 radial_read_5 module~vars vars proc~radial_read_5->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None Called by proc~~radial_read_5~~CalledByGraph proc~radial_read_5 radial_read_5 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_5 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. nK2 integer None Number of output values. kres2 integer None Number of steps between output values. rad_log_perp logical None Logirithmic or linear scan. rad_log_par logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"proc/radial_read_5.html"},{"title":"radial_read_6 – PLUME","text":"private  subroutine radial_read_6() Uses vars proc~~radial_read_6~~UsesGraph proc~radial_read_6 radial_read_6 module~vars vars proc~radial_read_6->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None Called by proc~~radial_read_6~~CalledByGraph proc~radial_read_6 radial_read_6 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_6 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for initial value. theta_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. ntheta integer None Number of output values. thetares integer None Number of steps between output values. rad_log_k logical None Logirithmic or linear scan. rad_log_theta logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"proc/radial_read_6.html"},{"title":"get_runname – PLUME","text":"private  subroutine get_runname(runname) Get runname for output files from input argument\nby trimming '.in'. Arguments Type Intent Optional Attributes Name character(len=50), intent(out) :: runname Argument trimmed of '.in' string. Called by proc~~get_runname~~CalledByGraph proc~get_runname get_runname proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_runname proc~read_in_params read_in_params proc~read_in_params->proc~get_runname proc~read_map_input read_map_input proc~read_map_input->proc~get_runname proc~read_radial_input read_radial_input proc~read_radial_input->proc~get_runname proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_runname program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_map_input program~plume->proc~read_radial_input program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/get_runname.html"},{"title":"get_indexed_namelist_unit – PLUME","text":"private  subroutine get_indexed_namelist_unit(unit, nml, index_in) Extract namelist. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit character(len=*), intent(in) :: nml integer, intent(in) :: index_in Calls proc~~get_indexed_namelist_unit~~CallsGraph proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_unused_unit get_unused_unit proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~get_indexed_namelist_unit~~CalledByGraph proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_indexed_namelist_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/get_indexed_namelist_unit.html"},{"title":"get_unused_unit – PLUME","text":"public  subroutine get_unused_unit(unit) Find a I/O unit that is not currently open. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Called by proc~~get_unused_unit~~CalledByGraph proc~get_unused_unit get_unused_unit proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~get_unused_unit proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_unused_unit proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_unused_unit proc~read_in_params->proc~get_indexed_namelist_unit proc~read_map_input read_map_input proc~read_map_input->proc~get_unused_unit proc~read_radial_input read_radial_input proc~read_radial_input->proc~get_unused_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_unused_unit proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_map_input program~plume->proc~read_radial_input program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/get_unused_unit.html"},{"title":"nrutil_trim – PLUME","text":"Numerical Recipes Types Utilized in PLUME. Uses nrtype module~~nrutil_trim~~UsesGraph module~nrutil_trim nrutil_trim module~nrtype nrtype module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~nrutil_trim~~UsedByGraph module~nrutil_trim nrutil_trim proc~bessim bessim proc~bessim->module~nrutil_trim proc~bessim0 bessim0 proc~bessim0->module~nrutil_trim proc~bessim1 bessim1 proc~bessim1->module~nrutil_trim Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer(kind=I4B), public, parameter :: NPAR_ARTH = 16 integer(kind=I4B), public, parameter :: NPAR2_ARTH = 8 integer(kind=I4B), public, parameter :: NPAR_GEOP = 4 integer(kind=I4B), public, parameter :: NPAR2_GEOP = 2 integer(kind=I4B), public, parameter :: NPAR_CUMSUM = 16 integer(kind=I4B), public, parameter :: NPAR_CUMPROD = 8 integer(kind=I4B), public, parameter :: NPAR_POLY = 8 integer(kind=I4B), public, parameter :: NPAR_POLYTERM = 8 Interfaces public        interface assert public  subroutine assert1 (n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string public  subroutine assert2 (n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string public  subroutine assert3 (n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string public  subroutine assert4 (n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string public  subroutine assert_v (n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string public        interface poly public  function poly_rr (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) public  function poly_rrv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_dd (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) public  function poly_ddv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) public  function poly_rc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_cc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_msk_rrv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_msk_ddv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x)) Functions public  function poly_rr (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) public  function poly_dd (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) public  function poly_rc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_cc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_rrv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_ddv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) public  function poly_msk_rrv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_msk_ddv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x)) Subroutines public  subroutine assert1 (n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string public  subroutine assert2 (n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string public  subroutine assert3 (n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string public  subroutine assert4 (n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string public  subroutine assert_v (n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string","tags":"","loc":"module/nrutil_trim.html"},{"title":"bessels – PLUME","text":"Calculates Bessel Functions necessary for the dispersion calculation. Functions public  function bessim0 (x) Calculates the Modified Bessel Function of order zero.\nDetermines I_0(x) e&#94;(-x) instead of I_0(x)\nto avoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. public  function bessim1 (x) Calculates the Modified Bessel Function of order one.\nDetermines I_1(x) e&#94;(-x) instead of I_1(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. public  function bessim (n, x) Calculates the Modified Bessel Function of arbitrary order.\nDetermines I_n(x) e&#94;(-x) instead of I_n(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name integer(kind=I4B), intent(in) :: n Order of Modified Bessel Function. real(kind=SP), intent(in) :: x Order of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation.","tags":"","loc":"module/bessels.html"},{"title":"nrtype – PLUME","text":"Numerical Recipes Types Utilized in PLUME. Used by module~~nrtype~~UsedByGraph module~nrtype nrtype module~nrutil_trim nrutil_trim module~nrutil_trim->module~nrtype proc~bessim bessim proc~bessim->module~nrtype proc~bessim->module~nrutil_trim proc~bessim0 bessim0 proc~bessim0->module~nrtype proc~bessim0->module~nrutil_trim proc~bessim1 bessim1 proc~bessim1->module~nrtype proc~bessim1->module~nrutil_trim Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, public, parameter :: I4B = SELECTED_INT_KIND(9) integer, public, parameter :: I2B = SELECTED_INT_KIND(4) integer, public, parameter :: I1B = SELECTED_INT_KIND(2) integer, public, parameter :: SP = KIND(1.0) integer, public, parameter :: DP = KIND(1.0D0) integer, public, parameter :: SPC = KIND((1.0, 1.0)) integer, public, parameter :: DPC = KIND((1.0D0, 1.0D0)) integer, public, parameter :: LGT = KIND(.true.) real(kind=SP), public, parameter :: PI = 3.141592653589793238462643383279502884197_sp real(kind=SP), public, parameter :: PIO2 = 1.57079632679489661923132169163975144209858_sp real(kind=SP), public, parameter :: TWOPI = 6.283185307179586476925286766559005768394_sp real(kind=SP), public, parameter :: SQRT2 = 1.41421356237309504880168872420969807856967_sp real(kind=SP), public, parameter :: EULER = 0.5772156649015328606065120900824024310422_sp real(kind=DP), public, parameter :: PI_D = 3.141592653589793238462643383279502884197_dp real(kind=DP), public, parameter :: PIO2_D = 1.57079632679489661923132169163975144209858_dp real(kind=DP), public, parameter :: TWOPI_D = 6.283185307179586476925286766559005768394_dp Derived Types type, public :: sprs2_sp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=SP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol type, public :: sprs2_dp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=DP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol","tags":"","loc":"module/nrtype.html"},{"title":"vars – PLUME","text":"Contains all global variables. Used by module~~vars~~UsedByGraph module~vars vars proc~map_read map_read proc~map_read->module~vars proc~om_read om_read proc~om_read->module~vars proc~radial_read radial_read proc~radial_read->module~vars proc~radial_read_0 radial_read_0 proc~radial_read_0->module~vars proc~radial_read_1 radial_read_1 proc~radial_read_1->module~vars proc~radial_read_2 radial_read_2 proc~radial_read_2->module~vars proc~radial_read_3 radial_read_3 proc~radial_read_3->module~vars proc~radial_read_4 radial_read_4 proc~radial_read_4->module~vars proc~radial_read_5 radial_read_5 proc~radial_read_5->module~vars proc~radial_read_6 radial_read_6 proc~radial_read_6->module~vars proc~read_guess_input read_guess_input proc~read_guess_input->module~vars proc~read_in_params read_in_params proc~read_in_params->module~vars proc~read_map_input read_map_input proc~read_map_input->module~vars proc~read_radial_input read_radial_input proc~read_radial_input->module~vars proc~read_scan_input read_scan_input proc~read_scan_input->module~vars proc~scan_read scan_read proc~scan_read->module~vars proc~spec_read spec_read proc~spec_read->module~vars program~plume plume program~plume->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial real, public, target :: betap Reference Species Parallel Thermal-to-Magnetic Pressure Ratio.\n8 pi n_ref T_ref,par/B&#94;2 real, public, target :: kperp Wavenumber perpendicular to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_perp,ref/Omega_ref real, public, target :: kpar Wavenumber parallel to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_t,ref,perp/Omega_ref real, public, target :: vtp Parallel reference thermal velocity normalized to the speed of light.\nv_t,ref,par/c integer, public :: nspec = 3 Number of species/components to be included in calculation. integer, public :: nscan = 0 Number of parameter scans. type( specie ), public, dimension (:), allocatable, target :: spec Dimensionless Species/Component Parameters. type( specie ), public, dimension (:,:), allocatable, target :: rad_spec Array for Varying Species/Component Parameters (under development). type( scanner ), public, dimension (:), allocatable :: scan Array of scan parameters for all scans to be calculated. type( scanner ), public, dimension (:), allocatable :: rad_scan Array of scan parameters for extended parameter scans (under development). real, public, pointer :: sw Parameter Sweep parameter values. real, public, pointer :: sw2 Parameter Sweep parameter values. real, public, pointer :: sw3 Parameter Sweep parameter values. real, public, pointer :: sw4 Parameter Sweep parameter values. complex, public, dimension(:,:,:), allocatable :: susc Susceptibility tensor.\n(1:nspec,1:3,1:3) with the 3x3 subarray arranged as:\n(1,1) xx; (1,2) xy; (1,3) xz;\n(2,1) yx; (2,2) yy; (2,3) yz;\n(3,1) zx; (3,2) zy; (3,3) zz; complex, public, dimension(:,:,:,:), allocatable :: susc_low low-n components of the susceptibility tensor.\n(1:nspec,1:3,1:3,0:1) with the 3x3 subarray arranged as susc.\nThe final index contains the n=0 and n=\\pm 1 contributions. logical, public :: low_n = .false. Toggle on low-n susceptibility suplementary calculation. logical, public :: new_low_n = .false. Flag to use Revised low_n for LD/TTD separation. complex, public, dimension(3,3) :: lam Matrix in Wave equation. integer, public :: option Selection for the type of dispersion calculation to be undertaken.\n-1: Calculate disp(om) at a single (omega, gamma)\n 0: Calculate Roots for input plasma parameters.\n 1: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over plasma parameters, with range and type specified in .in file.\n 2: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over two-dimensional plasma parameters space,\n    with range and type specified in .in file.\n 3: deprecated\n 4: Make multiple maps of complex frequency space.\n 5: Find roots for parameters along a prescribed path\n    Path is set by solar wind models, with values calculated and\n    output by helper function (in development, the radial scan function.). logical, public :: writeOut Enables or suppressed output to screen. character(len=100), public :: dataName Data Subdirectory where output is stored. character(len=100), public :: outputName Common name string for output files. character(len=100), public :: print_Name Additional string for output files. logical, public :: use_map Determines method for selecting initial solutions.\nT-> Use map routine to determine solutions in defined regions of complex frequency space.\n    Map parameters determined by &maps list in .in file.\nF-> Read nroot_max initial guesses for complex frequency solutions.\n    Guesses determined by &guess_N lists in .in file. logical, public :: loggridw Set log or linear spacing for real frequency axis of the map search. logical, public :: loggridg Set log or linear spacing for imaginary frequency axis of the map search. real, public :: omi Lower bound on real frequency map search axis. real, public :: omf Upper bound on real frequency map search axis. real, public :: gami Lower bound on imaginary frequency map search axis. real, public :: gamf Upper bound on imaginary frequency map search axis. logical, public :: positive_roots = .false. Consider all solutions (false) or only solutions with positive real frequencies (true). integer, public, parameter :: nr = 128 Number of grid points along real frequency axis integer, public, parameter :: ni = 128 Number of grid points along imaginary frequency axis integer, public, parameter :: numroots = 500 Maximum number of minima to keep for a further refinement from a map search. integer, public :: nRad Number of points to scan in radial models. character(len=100), public :: modelName Input file name for radial model real, public, dimension (:), allocatable :: radius Radial distance from the Sun, in Rs. real, public, dimension (:), allocatable :: beta_rad real, public, dimension (:), allocatable :: vtp_rad logical, public :: radial_heating logical, public :: radial_eigen integer, public :: k_scan Determines wavevector values to include in radial scan\n0: single point in kperp, kpar space\n1: fixed kperp, scan over kpar\n2: fixed kpar,  scan over kperp\n3: fixed theta, scan over k\n4: fixed k, scan over theta\n5: plane scan over (kperp, kpar)\n6: plane scan over (k, theta) real, public :: pi 4.*atan(1) integer, public :: nroots Number of roots found. real, public, dimension(1:2,1:numroots) :: wroots Real and Imaginary components of each solution. integer, public :: nroot_max Input specified nroots to follow. Derived Types type, public :: specie Species Input Parameters Components Type Visibility Attributes Name Initial real, public :: tau_s Relative Temperature ratio. real, public :: mu_s Relative Mass ratio. real, public :: alph_s Temperature Anisotropy. real, public :: Q_s Relative charge ratio. real, public :: D_s Density Ratio. real, public :: vv_s Relative Drift, normalized to reference Alfven velocity with . type, public :: scanner Parameters to control parameter scans. Components Type Visibility Attributes Name Initial real, public :: range_i Initial value of scanned parameter. real, public :: range_f Final value of scanned parameter. logical, public :: log_scan Linear or Logarithmic scan.\nT-> log, F-> linear scan logical, public :: heat_s Controls supplementary heating calculation.\nT-> Heating Calculation; F-> No heating calculation. logical, public :: eigen_s Controls supplementary eigenfunction calculation.\nT-> Eigenfunction calculation;   F-> No eigenfunction Calculation. logical, public :: tensor_s Controls supplementary output of susceptibility tensor.\nT-> Output tensor; F-> Supress output. integer, public :: type_s Defines nature of parameter scans.\n Style: -1- Global two component Scan:\n     Type: 0 k_0-> k_1\n           1 theta_0 -> theta_1\n           2 k_fixed angle\nStyle: 0- Global Scan:\n     Type: 0 kperp\n           1 kpar\n           2 betap\n           3 vtp\nStyle: 1-nspec-> Species Scan:\n     Type: 0 tau_s\n           1 mu_s\n           2 alph_s\n           3 Q_s\n           4 D_s\n           5 vv_s integer, public :: style_s Defines nature of parameter scan.\n-1: Global two-component scan\n 0: Global one-component\n 1 to nspec: species specific parameter scan integer, public :: n_scan Number of output steps.\nn_scan*n_res Total steps taken. integer, public :: n_res Scan resolution between output steps.\nn_scan*n_res Total steps taken. real, public :: diff Step size for scanned parameter.\n Either (swf-swi)/(n_scan n_res)\n or\n (log10(swf)-log10(swi))/(n_scan n_res).","tags":"","loc":"module/vars.html"},{"title":"functions – PLUME","text":"Calculates Misc. functions, esp. I/O operations. Used by module~~functions~~UsedByGraph module~functions functions program~plume plume program~plume->module~functions Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, private :: is Index for scan and species loops. integer, private :: unit Custom index for I/O. integer, private, parameter :: stdout_unit = 6 Standard index for I/O. integer, private, save :: input_unit_no Index for reading in files. integer, private, save :: error_unit_no = stdout_unit Index for outputing error messages. character(len=50), private :: runname String for input file parameters. Functions private  function input_unit_exist (nml, exist) Is a namelist already open? Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml logical, intent(out) :: exist Return Value integer private  function input_unit (nml) Determine I/O unit. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Return Value integer Subroutines public  subroutine read_in_params () Read in system parameters.\nInput file is argument after executable:\n$ ./plume.e example.in Arguments None private  subroutine spec_read (is) Subroutine for reading in species/component parameters. Arguments Type Intent Optional Attributes Name integer :: is Species index. public  subroutine read_map_input () Read in parameters for bounds on mapping dispersion roots.\n Invokes map_read . Arguments None private  subroutine map_read () Subroutine for reading in frequency limits for map search of\n complex frequency solution space. Arguments None public  subroutine read_scan_input () Read in limits for scans in plasma parameter space.\n Invokes scan_read . Arguments None private  subroutine scan_read (is) Subroutine for reading in scan parameters. Arguments Type Intent Optional Attributes Name integer :: is Scan index. public  subroutine read_guess_input () Read in initial values for solutions.\n Invokes om_read . Arguments None private  subroutine om_read (is) Subroutine for reading in initial guesses for complex frequencies of solutions. Arguments Type Intent Optional Attributes Name integer :: is Solution Index. public  subroutine read_radial_input () Read in parameters for radial solar wind model scan.\n(in development). Arguments None private  subroutine radial_read () Subroutine for reading in radial scan global parameters Arguments None private  subroutine radial_read_0 () Subroutine for reading in radial scan parameters\nwith fixed and . Arguments None private  subroutine radial_read_1 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_2 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_3 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_4 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_5 () Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None private  subroutine radial_read_6 () Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None private  subroutine get_runname (runname) Get runname for output files from input argument\nby trimming '.in'. Arguments Type Intent Optional Attributes Name character(len=50), intent(out) :: runname Argument trimmed of '.in' string. private  subroutine get_indexed_namelist_unit (unit, nml, index_in) Extract namelist. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit character(len=*), intent(in) :: nml integer, intent(in) :: index_in public  subroutine get_unused_unit (unit) Find a I/O unit that is not currently open. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit","tags":"","loc":"module/functions.html"},{"title":"plume – PLUME","text":"Uses functions vars disprels program~~plume~~UsesGraph program~plume plume disprels disprels program~plume->disprels module~functions functions program~plume->module~functions module~vars vars program~plume->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calls program~~plume~~CallsGraph program~plume plume map_scan map_scan program~plume->map_scan map_search map_search program~plume->map_search om_double_scan om_double_scan program~plume->om_double_scan om_scan om_scan program~plume->om_scan proc~read_guess_input read_guess_input program~plume->proc~read_guess_input proc~read_in_params read_in_params program~plume->proc~read_in_params proc~read_map_input read_map_input program~plume->proc~read_map_input proc~read_radial_input read_radial_input program~plume->proc~read_radial_input proc~read_scan_input read_scan_input program~plume->proc~read_scan_input radial_scan radial_scan program~plume->radial_scan refine_guess refine_guess program~plume->refine_guess test_disp test_disp program~plume->test_disp proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_guess_input->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_guess_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_guess_input->proc~get_unused_unit proc~om_read om_read proc~read_guess_input->proc~om_read proc~read_in_params->proc~get_indexed_namelist_unit proc~read_in_params->proc~get_runname proc~read_in_params->proc~get_unused_unit proc~spec_read spec_read proc~read_in_params->proc~spec_read proc~read_map_input->proc~get_runname proc~read_map_input->proc~get_unused_unit proc~map_read map_read proc~read_map_input->proc~map_read proc~read_radial_input->proc~get_runname proc~read_radial_input->proc~get_unused_unit proc~radial_read radial_read proc~read_radial_input->proc~radial_read proc~radial_read_0 radial_read_0 proc~read_radial_input->proc~radial_read_0 proc~radial_read_1 radial_read_1 proc~read_radial_input->proc~radial_read_1 proc~radial_read_2 radial_read_2 proc~read_radial_input->proc~radial_read_2 proc~radial_read_3 radial_read_3 proc~read_radial_input->proc~radial_read_3 proc~radial_read_4 radial_read_4 proc~read_radial_input->proc~radial_read_4 proc~radial_read_5 radial_read_5 proc~read_radial_input->proc~radial_read_5 proc~radial_read_6 radial_read_6 proc~read_radial_input->proc~radial_read_6 proc~read_scan_input->proc~get_indexed_namelist_unit proc~read_scan_input->proc~get_runname proc~read_scan_input->proc~get_unused_unit proc~scan_read scan_read proc~read_scan_input->proc~scan_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Attributes Name Initial integer :: is Index for looping through parametric variations with om_scan .","tags":"","loc":"program/plume.html"},{"title":"  params – PLUME\n","text":"Variables Name Type Default Description betap real None Reference Species Parallel Thermal-to-Magnetic Pressure Ratio.\n8 pi n_ref T_ref,par/B&#94;2 kperp real None Wavenumber perpendicular to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_perp,ref/Omega_ref kpar real None Wavenumber parallel to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_t,ref,perp/Omega_ref vtp real None Parallel reference thermal velocity normalized to the speed of light.\nv_t,ref,par/c nspec integer 3 Number of species/components to be included in calculation. nscan integer 0 Number of parameter scans. option integer None Selection for the type of dispersion calculation to be undertaken.\n-1: Calculate disp(om) at a single (omega, gamma)\n 0: Calculate Roots for input plasma parameters.\n 1: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over plasma parameters, with range and type specified in .in file.\n 2: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over two-dimensional plasma parameters space,\n    with range and type specified in .in file.\n 3: deprecated\n 4: Make multiple maps of complex frequency space.\n 5: Find roots for parameters along a prescribed path\n    Path is set by solar wind models, with values calculated and\n    output by helper function (in development, the radial scan function.). nroot_max integer None Input specified nroots to follow. use_map logical None Determines method for selecting initial solutions.\nT-> Use map routine to determine solutions in defined regions of complex frequency space.\n    Map parameters determined by &maps list in .in file.\nF-> Read nroot_max initial guesses for complex frequency solutions.\n    Guesses determined by &guess_N lists in .in file. low_n logical .false. Toggle on low-n susceptibility suplementary calculation. new_low_n logical .false. Flag to use Revised low_n for LD/TTD separation. writeOut logical None Enables or suppressed output to screen. dataName character(len=100) None Data Subdirectory where output is stored. outputName character(len=100) None Common name string for output files.","tags":"","loc":"namelist/params.html"},{"title":"  species – PLUME\n","text":"Variables Name Type Default Description tauS real None Parallel Temperature Ratio. muS real None Mass Ratio. alphS real None Temperature Anisotropy. Qs real None Relative charge ratio. Ds real None Density Ratio. vvS real None Relative Drift, normalized to reference Alfven velocity with .","tags":"","loc":"namelist/species.html"},{"title":"  maps – PLUME\n","text":"Variables Name Type Default Description loggridw logical None Set log or linear spacing for real frequency axis of the map search. loggridg logical None Set log or linear spacing for imaginary frequency axis of the map search. omi real None Lower bound on real frequency map search axis. omf real None Upper bound on real frequency map search axis. gami real None Lower bound on imaginary frequency map search axis. gamf real None Upper bound on imaginary frequency map search axis. positive_roots logical .false. Consider all solutions (false) or only solutions with positive real frequencies (true).","tags":"","loc":"namelist/maps.html"},{"title":"  scan_input – PLUME\n","text":"Variables Name Type Default Description scan_type integer None Defines kind of parameter scans. swi real None Initial value of scanned parameter. swf real None Final value of scanned parameter. swlog logical None Linear or Logarithmic scan. scan_style integer None Defines number of components of scan. ns integer None Number of output steps. nres integer None Scan resolution between output steps. heating logical None Controls supplementary heating calculation. eigen logical None Controls supplementary eigenfunction calculation. tensor logical None Controls supplementary output of susceptibility tensor.","tags":"","loc":"namelist/scan_input.html"},{"title":"  guess – PLUME\n","text":"Variables Name Type Default Description g_om real None Dummy values for real frequency component of solution. g_gam real None Dummy values for imaginary frequency component of solution.","tags":"","loc":"namelist/guess.html"},{"title":"  radial_input – PLUME\n","text":"Variables Name Type Default Description nRad integer None Number of points to scan in radial models. modelName character(len=100) None Input file name for radial model radial_heating logical None radial_eigen logical None k_scan integer None Determines wavevector values to include in radial scan\n0: single point in kperp, kpar space\n1: fixed kperp, scan over kpar\n2: fixed kpar,  scan over kperp\n3: fixed theta, scan over k\n4: fixed k, scan over theta\n5: plane scan over (kperp, kpar)\n6: plane scan over (k, theta)","tags":"","loc":"namelist/radial_input.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for readin.","tags":"","loc":"namelist/k_range.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"namelist/k_range~2.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for fixed . nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"namelist/k_range~3.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for fixed value (in deg.) nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"namelist/k_range~4.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description k_1 real None Dummy variable for fixed value. theta_1 real None Dummy variable for initial value (in deg.). theta_2 real None Dummy variable for final value (in deg.). nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"namelist/k_range~5.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. nK2 integer None Number of output values. kres2 integer None Number of steps between output values. rad_log_perp logical None Logirithmic or linear scan. rad_log_par logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"namelist/k_range~6.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for initial value. theta_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. ntheta integer None Number of output values. thetares integer None Number of steps between output values. rad_log_k logical None Logirithmic or linear scan. rad_log_theta logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","loc":"namelist/k_range~7.html"},{"title":"Readme – PLUME","text":"PLUME: Plasma in a Linear Uniform Magnetized Environment This is the PLUME code: Plasma in a Linear Uniform Magnetized Environment. Authors Kristopher Klein   (kgklein@arizona.edu)\nGregory Howes      (gregory-howes@uiowa.edu) Contents What is PLUME? Acknowledgements Installing the PLUME Code Running the PLUME Code License 1. What is PLUME? PLUME is a numerical code that solves the Vlasov-Maxwell dispersion\nrelation in hot magnetised plasma.\nPLUME allows for any number of particle species or components, assuming each can be described by a bi-Maxwellian distribution with a defined density, velocity parallel to the mean magnetic fiedl, and parallel and perpendicular temperatures.\nThe solver is able to identify supported waves with any direction of propagation with respect to the background magnetic field. This code uses an F90 adaptation by Greg Howes of a solver originally by Eliot Quataert. The calculation follows Stix Chapter 10 eqn 66-73.\nThe dispersion relation for is dependent on four global dimensionless parameters: betap: Plasma Reference Beta:               8 pi n_ref T_ref /B&#94;2\n   kperp: Perpendicular wavelength:         kperp rho_ref\n   kpar : Parallel wavelength:              kparallel rho_ref\n   vtp  : Parallel proton thermal velocity: sqrt(2 T_||ref/m_ref)/c\n\n and six dimensionless component parameters:\n\n   tau_s : T_ref/T_s\n   mu_s  : m_ref/m_s\n   alph_s: T_perp/T_parallel|s\n   Q_s   : q_ref/q_s\n   D_s   : n_s/n_ref\n   vv_s  : v_s,drift/v_Aref The values for these parameters are extracted from *.in file, appended after\n    the executable program call. The code then varies defined parameters to construct dispersion relations as a function of wavevector or plasma parameter for the identified modes.\nSupplementary calculation of the associated heating rates or eigenfunctions can also be calculated. 2. Acknowledgements If you use the code for a science publication,\n1. please provide the code website lorem ipsum in the acknowledgements, cite the DOI of the code:\nlorem ipsum and cite the code paper: lorem ipsum 3. Installing the PLUME code For advice on the installation of the code, please check INSTALL.md 4. Running the PLUME code PLUME works with input files that specify the plasma and numerical parameters for\nthe calculation. 5. License BSD 2-Clause License Copyright (c) 2025, Kristopher G. Klein and Gregory Howes\nAll rights reserved. Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","tags":"","loc":"page/index.html"},{"title":"Installing PLUME – PLUME","text":"PLUME: Plasma in a Linear Uniform Magnetized Environment These are the install instructions for the PLUME code: the Plasma in a Linear Uniform Magnetized Environment. Authors Kristopher Klein   (kgklein@arizona.edu)\nGregory Howes      (gregory-howes@uiowa.edu) CONTENTS Requirements and Dependencies Setting up Computer Environments Getting the PLUME Code Installing the PLUME Code Execution of Test Runs REQUIREMENTS AND DEPENDENCIES ALPS has the following requirements: A UNIX, Linux, or macOS operating system with a working shell GNU make, in some cases it is useful to have the autoconf/automake tools Fortran 90 compiler (e.g., gfortran) - we recommend using the latest version\n  of the compiler to avoid any surprises in the evaluation. SETTING UP COMPUTER ENVIRONMENTS For Ubuntu and macOS users, the following instructions have proven to be useful. GETTING THE PLUME CODE We recommend pulling the latest version of PLUME from GitHub. For this, go to\nthe directory where you want to install PLUME and execute the following command: git clone https://github.com/kgklein/PLUME.git Alternatively, you can also go to the website https://https://github.com/kgklein/PLUME directly and download the source code from there. The advantage of using the git\ncommand is that you can now contribute to the development of the PLUME code. If\nyou make any changes to the code, GitHub will run automatic tests (via workflows)\nto ensure that the changes do not break the code. INSTALLING THE PLUME CODE If all requirements are available, the code can be compiled with the following\ncommands: make EXECUTION OF TEST RUNS PLUME comes with a selection of test runs that cycle through various test\nproblems. To execute a small set of tests, execute the following shell script: ./run_test.sh This script will test the interpolation routine, the routine to generate pre-\ndescribed distribution functions, and a simply fast dispersion relation. Building the documentation PLUME uses Ford to build its documentation. The documentation is automatically built and deployed to github.io by the doc workflow . To build the documentation locally, follow the Build documentation step in the workflow, summarized here:\n1. Install ford by e.g. pip install ford . See Ford documentation for details\n2. Create a docs directory by mkdir docs 3. Add a line title: Readme to the top of README.md and copy it to docs/index.md 4. Add a line title: Install to the top of INSTALL.md and copy it to docs/INSTALL.md 5. Run ford ford_project.md 6. Open docs/index.html in a browser to view the documentation Adding static pages to documentation The README.md and INSTALL.md files are added to the Ford documentation as static pages. You can add more static pages to the documentation by\n1. Add the content in a markdown file to the repository.\n2. Add a title: line to the beginning of the file and copy it to docs/ in the doc workflow . See steps 3-4 in the previous section, or the Build documentation step in the workflow.\n3. Add the name of the markdown file as a new line under ordered_subpage in ford_project.md","tags":"","loc":"page/INSTALL.html"},{"title":"PLUME Input – PLUME","text":"PLUME Input This is a reference for the key input parameters used by PLUME (currently editing). Namelists in input files. The following namelists and associated input parameters are read in by PLUME from the input file. &system General system parameters. kperp Initial perpendicular wavevector $k_{\\perp} \\rho_{ref}$. kpar Initial parallel wavevector $k_{\\parallel} \\rho_{ref}$. nspec Number of plasma species. nroots Number of dispersion solutions to find and follow. use_map Choice of: True: Searching for roots over a map in complex frequency space (see &maps namelist). False: Input nroots guesses for solutions (see &guess_1 namelist). writeOut Write or suppress output to screen. nperp Perpendicular momentum space resolution, $N_{\\perp}$.\nThe input file must have $N_{\\perp}+1$ values spanning parallel momentum space. npar Parallel momentum space resolution, $N_{\\parallel}$.\nThe input file must have $N_{\\parallel}+1$ values spanning parallel momentum space. ngamma Relativistic momentum space resolution, $N_{\\Gamma}$. npparbar Relativistic parallel momentum space resolution, $N_{\\bar{p}_{\\parallel}}$. vA Reference Alfven velocity, normalized to the speed of light, $v_{A}/c$. arrayName Name of input array, located in 'distribution' folder. Bessel_zero Maximum amplitude of Bessel function to determine nmax . numiter Maximum number of iterations in secant method. D_threshold Minimum threshold for secant method. D_prec Size of bounding region for secant method. D_gap Size of allowable difference between roots. positions_principal Number of parallel momentum steps distant from the resonant momentum\nincluded in the numerical calculation of Eqn 3.5, $M_{I}$. n_resonance_interval How many steps should be used to integrate around the resonance,\n$M_{P}$, used for integrating near poles (see section 3.1). Tlim Threshold for analytical principal-value integration, $t_{\\mathrm{lim}}$. maxsteps_fit=500 Maximum number of fitting iterations. lambda_initial_fit Inital Levenberg-Marquardt damping parameter. lambdafac_fit Adjustment factor for Levenberg-Marquardt damping parameter. epsilon_fit Convergence for Levenberg-Marquardt fit. fit_check If true, output fitted functions for each species to file in distribution directory. determine_minima If true, after map search, determine minima and refine solutions. scan_option Select case for wavevector scans: 1: Consecutive scans along input paths in wavevector space, 2: Double scan over wavevector plane. n_scan Number of wavevector scans. 0 turns off wavevector scans. Must be 1 or larger for scan_option =1. Must be set to 2 for scan_option =2. &guess_m Initial guess of complex frequency for $m$th solution. Only used when use_map =.false. Need to have number of name lists equal to nroots . g_om Guess for real solution $\\omega_{r}/\\Omega_{p} $. g_gam Guess for imaginary solution $\\gamma/\\Omega_{p} $. &maps_1 Range of complex frequencies for map_scan subroutine. Only used when use_map =.true. loggridw Linear (F) or Log (T) spacing for $\\omega_{r}/\\Omega_{p}$ map search.\nSpacing automatically calculated between omi and omf . loggridg Linear (F) or Log (T) spacing for $\\gamma/\\Omega_{p}$ map search.\nSpacing automatically calculated between gami and gamf omi Smallest $\\omega_{r}/\\Omega_{p}$ value for complex map search. omf Largest $\\omega_{r}/\\Omega_{p}$ value for complex map search. gami Smallest $\\gamma/\\Omega_{p}$ value for complex map search. gamf Largest $\\gamma/\\Omega_{p}$ value for complex map search. ni Number of $\\gamma/\\Omega_{p}$ points in frequency grid. nr Number of $\\omega_{r}/\\Omega_{p}$ points in frequency grid. &spec_j Species parameters list for distribution $f_{j}$. nn Relative density $n_{j}/n_{p}$. qq Relative charge $q_{j}/q_{p}$. mm Relative mass $m_{j}/m_{p}$. ff Number of fitted functions for analytical continuation calculation. relat Treat $f_{j}$ as non-relativistic or relativistic. log_fit Use linear or $\\log_{10}$ fitting routine. use_bM Use actual numerical integration (F) or bi-Maxwellian/cold-plasma proxy via NHDS routines,\nwith parameters read in from &bM_spec_j namelist. AC_method Choose the method for the evaluation of the analytic continuation: 0: Use the function that is defined analytically in distribution/distribution_analyt.f90 1: Use the fit routine as defined in the &ffit_j_k namelist. 2: Use a polynomial basis representation as defined in the &poly_spec_j namelist. This method should only be used if $|\\gamma|\\ll |\\omega_{r}|$. &ffit_j_k Initial Fit Values for species $j$, function $k$. fit_type_in Kind of fit function: 1: Maxwellian, 2: Kappa, 3: Juettner with $p_{\\perp},p_{\\parallel}$, 4: Juettner with variable $\\Gamma$, constant $\\bar{p}_{\\parallel}$, 5: Juettner with $p_{\\perp},p_{\\parallel}$; variable $\\bar{p}_{\\parallel}$, 6: Bi-Moyal distribution fit_1 - fit_5 Fit parameters, $u_{1}$ - $u_{5}$, defined in the above equations for each of the types of fit functions.\nNot all parameters will be used for all functions. Suggested values for parameters generated by generate_distribution. perpcorr This parameter, $y$ in Eqn. B1, compensates for the strong\n$p_{\\perp}$ dependence of $u_1$, making the fit more reliable. &bM_spec_j Bi-Maxwellian/cold-plasma parameters; for species j.\nOnly used if use_bM=T . bM_nmaxs Maximum number of resonances to consider. bM_Bessel Precision threshold for $I_n$. bM_betas $\\beta_{\\parallel,j}$ of bi-Maxwellian distribution $f_{j}$. If this variable is set to 0.d0, then the code will treat the given species with the susceptibility from cold-plasma theory. bM_alphas $T_{\\perp,j}/T_{\\parallel,j}$ of bi-Maxwellian distribution $f_{j}$. bM_pdrifts Relative drift of bi-Maxwellian distribution $f_{j}$ or the cold plasma species in units of $m_{p} v_{A,p}$. &poly_spec_j Input for the polynomial representation of the input distribution for the analytical continuation.\nOnly used if AC_method=2 . kind Type of the basis polynomial: 1: Chebychev order Maximum order of the basis polynomial. log_max When using logfit for the polynomial representation, set all output values to zero if the log(fit_function_poly) is greater than this variable. &scan_input_l Inputs for scanning parameter space for $l$th scan. scan_type Type of parameter scan: 0: Current value of $\\textbf{k}$ to $k_{\\perp}$= swi and $k_{\\parallel}$ = swf . 1: $\\theta_0 \\rightarrow \\theta_1$ at fixed $|k|$ from current value of $\\theta=\\mathrm{atan}(k_{\\perp}/k_{\\parallel})$ to swf . 2: Wavevector scan at fixed angle $\\theta_{k,B}$ to $|k|$ = swf . 3: $k_{\\perp}$ scan with constant $k_{\\parallel}$ to $k_{\\perp}$= swf . 4: $k_{\\parallel}$ scan with constant $k_{\\perp}$ to $k_{\\parallel}$= swf . swi Scan variable to define end of scan through wavevector space (only for scan_type=1 ). swf Scan variable to define end of scan through wavevector space. swlog Use $\\log_{10}$ (T) or linear (F) spacing. ns Number of output scan values. nres Resolution between output scan values. heating Calculates heating rates if true. eigen Calculates eigenfunctions if true.","tags":"","loc":"page/input.html"},{"title":"PLUME Output – PLUME","text":"PLUME Output PLUME writes output solutions to the /data directory. All output file names start with the name of the input file used in running PLUME, e.g. mpirun -np 4 ./src/ALPS filename.in will produce output files all starting with the string filename . (editing...) filename .map Value of the dispersion tensor $\\mathcal{D}(\\omega_{\\textrm{r}},\\gamma)$ on a defined complex frequency grid. Solutions to the dispersion relation satisfy $|\\mathcal{D}|  =0$.\nThis file is generated from the map_search subroutine in ALPS_fns.f90, and invoked when use_map =.true. . The data is ordered in columns as 1. $\\omega_r$ 2. $\\gamma$ 3. $\\log_{10} |\\mathcal{D}|$ 4. Re $[|\\mathcal{D}|]$ 5. Im $[|\\mathcal{D}|]$ The &maps_1 namelist in filename .in determines the structure of filename .map. The range of $\\omega_{\\textrm{r}}/\\Omega_p$ is from omi to omi with nr steps. Logorithmic or linear spacing is selected with loggridw .\nThe range of $\\gamma_{\\textrm{r}}/\\Omega_p$ is from gami to gami with ni steps. Logorithmic or linear spacing is selected with loggridg . filename .roots Identified solutions to the dispersion relation $|\\mathcal{D}|  =0$, calculated using refine_guess in ALPS_fns.f90 when determine_minima is set to true. The data is ordered as 1. Solution number\n2. $\\omega_r$ 3. $\\gamma$ 4. $\\log_{10} |\\mathcal{D}|$ 5. Re $[|\\mathcal{D}|]$ 6. Im $[|\\mathcal{D}|]$ The routine uses  either the coarse dispersion tensor map generated from the map_search subroutine (in the case of use_map = .true.) or from the input guesses (for use_map = .false.). Only the first nroots solutions will be identified and written to file. filename .scan_ scan_type_l .root_m The complex frequencies associated with solution m calculated from om_scan in the &scan_input_l namelist. The data is ordered as 1. $k_\\perp d_p$\n2. $k_\\parallel d_p$ 3. $\\omega_{\\textrm{r}}/\\Omega_p$ 4. $\\gamma/\\Omega_p$ See the &scan_input namelist description in the Quick Guide for details on determining the kind of wavevector scan. This same data structure is preserved for the output from om_double_scan . filename .eigen_ scan_type_l .root_m The eigenfunctions associated with solution m calculated from om_scan when eigen is set to .true.\nin the &scan_input_l namelist. The data is ordered as 1. $k_\\perp d_p$\n2. $k_\\parallel d_p$ 3. $\\omega_{\\textrm{r}}/\\Omega_p$ 4. $\\gamma/\\Omega_p$ 5. Re $[E_x]$ \n6. Im $[E_x]$ \n7. Re $[E_y]$ \n8. Im $[E_y]$ \n9. Re $[E_z]$ \n10. Im $[E_z]$ \n11. Re $[B_x]$ \n12. Im $[B_x]$ \n13. Re $[B_y]$ \n14. Im $[B_y]$ \n15. Re $[B_z]$ \n16. Im $[B_z]$ 17. [+6(is-1)] Re $[\\delta U_{x,is}]$ 18. [+6(is-1)] Im $[\\delta U_{x,is}]$ 19. [+6(is-1)] Re $[\\delta U_{y,is}]$ 20. [+6(is-1)] Im $[\\delta U_{y,is}]$ 21. [+6(is-1)] Re $[\\delta U_{z,is}]$ 22. [+6(is-1)] Im $[\\delta U_{z,is}]$ 17. [+6( nspec )+2(is-1)] Re $[\\delta n_{is}]$ 18. [+6( nspec )+2(is-1)] Im $[\\delta n_{is}]$ This same data structure is preserved for the output from om_double_scan . filename .heat_ scan_type_l .root_m The heating rates associated with solution m calculated from om_scan when heating is set to .true.\nin the &scan_input_l namelist. The data is ordered as 1. $k_\\perp d_p$\n2. $k_\\parallel d_p$ 3. $\\omega_{\\textrm{r}}/\\Omega_p$ 4. $\\gamma/\\Omega_p$ 5. [+(is-1)] $\\gamma_{is}/\\omega$ This same data structure is preserved for the output from om_double_scan .","tags":"","loc":"page/output.html"},{"title":"PLUME Tutorial – PLUME","text":"PLUME Tutorial This is a tutorial for PLUME.\nIt will guide you through the setting up of some basic input files, the running of the code, and the basic output.\nFor more details, we refer to the PLUME Input page, the PLUME Output page, and the PLUME Documentation . Authors Kristopher Klein   (kgklein@arizona.edu) Gregory Howes      (gregory-howes@uiowa.edu) Contents Before getting started Installing PLUME 1. Before getting started Before starting with the steps described in this tutorial, we recommend that you familiarise yourself with the code paper. Verscharen, D., Klein, K. G., Chandran, B. D. G., Stevens, M. L., Salem, C. S.,\nand Bale, S. D.: ALPS: the Arbitrary Linear Plasma Solver, J. Plasma Phys. 84,\n905840403, 2018, doi: 10.1017/S0022377818000739 You don't need to go through all details, but it is certainly helpful to know what ALPS does and doesn't calculate. The code paper also explains the numerical techniques used in the code, and the ALPS Documentation often refers explicitly to equations and sections in the code paper. We also recommend checking the Readme file. 2. Installing PLUME This tutorial assumes that you have a working copy of ALPS on your computer, including all the required dependencies. You can find the installation guide here . Make sure you have a version of ALPS that compiled completely without error messages after typing ./configure  \nmake","tags":"","loc":"page/tutorial.html"}]}