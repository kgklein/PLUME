!=============================================================================!
!=============================================================================!
!!*PLUME                                                                    *!!
!!Plasma in a Linear Uniform Magnetized Environment                          !!
!!                                                                           !!
!!Kristopher Klein                                                           !!
!!kris.klein@gmail.com                                                       !!
!!Space Science Center, University of New Hampshire                          !!
!!                                                                           !!
!!*README                                                                   *!!
!=============================================================================!
!=============================================================================!


! PLUME calculates the hot plasma dispersion relation for a plasma with 
!       an arbitrary number of ion and electron species with relative drifts
!       and bi-Maxwellian velocity distributions.
!       The calculation follows Stix Chapter 10 eqn 66-73.

! NOTE: This code uses an F90 adaptation (by Greg Howes) of the Hot Plasma 
!       Dispersion Relation originally by Eliot Quataert, extending the
!	solver from a proton electron plasma with Maxwellian velocity distributions
! 	to the generalized case of n species with biMaxwellian 
!	velocity distributions and arbitrary parallel drift velocities.

! The Dispersion relation for omega/Omega_p 
!     is dependent on four global parameters:
!
!       betap: Plasma Proton Beta:               8 pi n_p T_p /B^2
!       kperp: Perpendicular wavelength:         kperp rho_p
!       kpar : Parallel wavelength:              kparallel rho_p
!       vtp  : Parallel proton thermal velocity: sqrt(2 T_||p/m_p)
!
!     and six species dependent parameters:
!
!       tau_s : T_p/T_s
!       mu_s  : m_p/m_s
!       alph_s: T_perp/T_parallel|s
!       Q_s   : q_p/q_s
!       D_s   : n_s/n_p
!       vv_s  : v_s,drift/v_Ap

!The values for these parameters are extracted from *.in file, appended after
!    the executable program call.

!Will find roots of the dispersion relation within a given bounding region
!(Using the map_search routine)
!or calculate the dispersion relation as a function of a parameter scan
!(Using the om_scan routine, with the map_search or an input guess
! providing the initial values for the frequencies)

!The main program (plume.f90) executes different subroutines 
!from the disprels.f90 module depending on the input value of 'option'.

!The code will either find 'nroot_max' roots of the dispersion relation
!for the input parameters, or refine 'nroot_max' input values for
!such roots. 
!The (4 + nspec * 6 ) parameters can be varied, with particular solutions 
!being followed for the variations. 
!-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
INPUT PARAMETERS specified in *.in file
!-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Organized by namelist:
======
======
&params
betap=1.00
kperp=1.E-3
kpar=1.E-3
vtp=1.E-4
nspec=2
nscan=1
option=1
nroot_max=1
use_map=.false.
writeOut=.true.
dataName='test'
outputName='b1a1'
/

GLOBAL PLASMA PARAMETERS
betap, kperp, kpar, vtp
%used for calculation of dispersion relation

# OF PLASMA SPECIES
nspec
%determines how many %species_n namelists to read in

# OF PARAMETER SCANS
nscan
%determines how many %scan_n namelists to read in

CASE SELECTION
option
%option determines the type of calculation(s) to ber performed
%cases outlines in README.cases

# OF DISPERSION ROOTS TO FOLLOW
nroot_max

USE MAPPING SUBROUTINE
use_map=.false.
%if use_map==F, read in nroot_max  %guess_n namelists
%if use_map==T, map subroutine outputs nroot_max roots of the system
%code follows 'nroot_max' roots

OUTPUT/SUPPRESS OUTPUT TO SCREEN
writeOut

LOCATION OF DATA OUTPUT
dataName=
%in folder 'data/'dataName,'/'

outputName=
%header for multiparameter map (i.e. option 2)
======
======
&species_1
tauS=1.0
muS=1.0
alphS=1.0
Qs=1.0
Ds=1.0
vvS=0.0
/
%nspec of these namelists will be readin

SPECIES DEPENDENT PLASMA PARAMETERS
tauS,muS,alphaS,Qs,Ds,vvS
%used for calculation of dispersion relation
%NOTE: v drift_proton = 0.0 
(Calculations are done in the proton rest frame)
%Make sure to insure that the plasma is
QUASINEUTRAL
Sum_s [n_s q_s] = 0
%and 
CURRENT-FREE
Sum_s [n_s q_s V_s] = 0 


======
======
&maps
loggridw=.false.	
loggridg=.false.
omi     =-1.5E-3
omf     = 1.5E-3
gami    =-1.E-3
gamf    = 1.E-4
/
%if use_map==T, determines bounds of map scan
%omi,omf upper and lower bounds for real frequency
%gami,gamf upper and lower bounds for imaginary frequency
%loggridw,loggridg determines log (T) or linear (F) 
%spacing for real (w) or imaginary (g) scan

======
======
&scan_input_1
scan_type=0
scan_style=0
swi=1.
swf=2.
swlog=.true.
ns=16
nres=16
heating=.true.
eigen=.true.
/

%nscan namelists are read in, each of which determine
% the nature of the plasma parameters scans

%scan_type, scan_style;
     !-=-=-=-=-=-=-=-=-
     !Defines nature of parameter scans:
     !Style: -1- Global two component Scan:
     !     Type: 0 k_0-> k_1           
     !           1 theta_0 -> theta_1
     !           2 k_fixed angle
     !Style: 0- Global Scan:
     !     Type: 0 kperp
     !           1 kpar
     !           2 betap
     !           3 vtp
     !Style: 1-nspec-> Species Scan:
     !    Type: 0 tau_s
     !           1 mu_s
     !           2 alph_s
     !           3 Q_s
     !           4 D_s
     !           5 vv_s
     !-=-=-=-=-=-=-=-=-    
PARAMETER RANGE
swi,swf
%initial, final values of parameter range
$EXCEPTIONS$
%style_s=-1 are scans with multiple components
%type_s=0: scan from current value of (kperp,kpar)
% to (kperp,kpar)=(swi,swf)
%type_s=1: theta scan from current value of (k,theta)
% to (k,theta)=(k,swi), with swi in degrees
%type_s=2: k scan from current value of (kperp,kpar)
% to (k=swf) with constant theta=atan(kperp/kpar)

%When making a map of two parameters (om_double_scan, 
%     called with option=2) do the theta scan before
%     the k_fixed angle scan.

swlog
%log (T) or linear (F) scan of variables

# OF OUTPUT STEPS ALONG SCAN
ns

# OF STEPS BETWEEN OUTPUT STEPS
nres

CALCULATE AND OUTPUT eigenfunctions AND wave power 
heating, eigen

OUTPUT FORMAT
%The output format for parameter depends on the number 
%    of species in the plasma
FOR EACH MODE:
kperp,kpar,betap,vtp, !1-4
omega,gamma,          !5-6
{ Bx,y,z              !7-12
  Ex,y,z              !13-18
  Ux,y,z|species      !19-24,25-30
  n|species }|(if eigen==true) !31-32,33-34
{ P|species }|(if heat ==true) !35,36
(tau,mu,alph,q,D,vv)|species   !37-42,43-48

The value of the dispersion relation is written to the file:
          'data/',trim(dataName),'/',&
          trim(param),'_',int(1000.*scan(is)%range_i),&
          '_',int(1000.*scan(is)%range_f)

-OR-

          'data/',trim(dataName),'/',&
          trim(param),'_s',scan(is)%style_s,'_',int(1000.*scan(is)%range_i),&
          '_',int(1000.*scan(is)%range_f)

where 'param' is the name of the parameter being scanned. 

Thus, the index of U_s onward will differ depending on the
number of plasma species and if eigen and heating are turned on.
======
======
&guess_1
g_om=1.E-1
g_gam=-1.E-1
/

nroot_max namelist files read in (if map_true == F)
(g_om, g_gam) values for real and imaginary frequency guesses

-=-=-=-=-=-
-=-=-=-=-=-
-=-=-=-=-=-
Eigenfunction Calculation:

E,B,Us,ns, and Ps are all calculated in the routine calc_eigen

Ex,y,z are found using linear algebra in manipulation of the equation

(wave vector tensor = lam) . E = 0

We take Ex = (1 + 0i), which yields
Ez/Ex = -(lam 21 lam 32 - lam 31 lam 22)/(lam 23 lam 32 - lam 33 lam 22)
Ey/Ex = -(Ez/Ex lam 33 - lam 31)/lam 32

We can express Bx,y,z using Faraday's law

nabla x E = -(1/c)partial B/ partial t

Rearrangement and expressing in our dimensionless units yields
(1/Ex)(Bx    (1/(om vtp sqrt(alph_p) Ex)) (-kpar Ey
       By  =                                kpar Ex - kperp Ez
       Bz)                                  kperp Ey)

For the velocity fluctuations, we use the expression for the first
order current fluctuations
j_s = -i omega Chi_s /(4 pi) . E = n_s q_s V_s

We choose a normalization by v_Ap, yielding

V_s/v_Ap = -i om (Qs/Ds)(vtp^2 sqrt(alph_p/beta_p)) Chi_s . E/Ex

Density is extracted from the linearized continuity equation

partial n/partial t + nabla . (Us ns)

omega (n0 + ns) - k . [(U0+Us)(n0+ns)] = 0

Taking the 1st order contribution

ns/n0 = (k . Us/v_Ap)/(om - kpar vv_s/sqrt(beta_p alph_p)) * (1/sqrt(beta_p alph_p))

The heating calculation for species s is described in Stix 1992, pg 289
and Quatart 1998

The calculation of (PS) the energy per wave period injected into or extracted 
from species s per unit wave energy (W) is valid for om >> gam, 
and definately falls apart for om =0 
(which happens with some frequency for the Alfven and Entropy modes)

Ps = (E* . Chi_s^a |gam = 0 . E)/4W

Chi_s^a = (Chi_s - Chi_s*)/(2i)
 
!-=--=-=-=-=- 
We have now added in the gyrokinetic dispersion relation
... or will do so quite soon.