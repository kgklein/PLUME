var tipuesearch = {"pages":[{"title":" PLUME ","text":"PLUME Plasma in a Linear Uniform Magnetized Environment PLUME is a parallelised numerical code that solves the Vlasov-Maxwell dispersion\nrelation in hot (even relativistic) magnetised plasma. If you use the code for a science publication, please provide the code website github.com/kgklein/PLUME in the acknowledgements of your publication, and cite the code: @software { PLUME_2025 , author = {{ Klein } , K . G . and { Howes } , G . G . } , title = { kgklein / PLUME : Zenodo release } , month = April , year = 2025 , publisher = { Zenodo } , version = { v1 .0.1 } , doi = { 10.5281 / zenodo .15215514 } , url = { https : // doi . org / 10.5281 / zenodo .15215514 } } and code paper Klein, K. G., Howes, G. G.,\nand Brown, C. R.: PLUME: Plasma in a Linear Uniform Magnetized Environment, RNAAS, 2025 Publications using the PLUME code can be found in our NASA ADS Library . For first-time users, we recommend working through our PLUME Tutorial . The key input parameters for PLUME are described on the PLUME Input page. The output format of PLUME is described on the PLUME Output page. Judging Energy Transfer in a - Plasma in a Linear Uniform Magnetized Environment JET-PLUME is an extension to PLUME that predicts wave-particle energy transfer in velocity space using the field-particle correlation technique and linear theory. Please see the README for JET-PLUME . JET-PLUME is operated in a similar manner to PLUME, either using command line or the python wrapper. See Section 4 above on how to operate and README for JET-PLUME for the additional inputs. Details If you use this code for a science publication, please provide the same code website as plume github.com/kgklein/PLUME in the acknowledgements of your publication and cite the code paper for JET-PLUME: ... Python wrapper (linfpclib) With the creation of JET-PLUME, a wrapper to use PLUME and JET-PLUME in a jupyter notebook was created. It aids in the creation of input files and running of the code with said input files. Please see the example notebook to see the key features of this wrapper. The use of the wrapper is entirely optional. NOTE: Please create and run notebooks from the main directory of the repository. This is necessary because the notebooks import key functions directly from the linfpclib module located there. Developer Info Kristopher Klein, Gregory Howes, Collin Brown","tags":"home","url":"index.html"},{"title":"sprs2_sp – PLUME ","text":"type, public :: sprs2_sp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=SP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol","tags":"","url":"type/sprs2_sp.html"},{"title":"sprs2_dp – PLUME ","text":"type, public :: sprs2_dp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=DP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol","tags":"","url":"type/sprs2_dp.html"},{"title":"specie – PLUME ","text":"type, public :: specie Species Input Parameters Components Type Visibility Attributes Name Initial real, public :: tau_s Relative Temperature ratio. real, public :: mu_s Relative Mass ratio. real, public :: alph_s Temperature Anisotropy. real, public :: Q_s Relative charge ratio. real, public :: D_s Density Ratio. real, public :: vv_s Relative Drift, normalized to reference Alfven velocity with .","tags":"","url":"type/specie.html"},{"title":"scanner – PLUME ","text":"type, public :: scanner Parameters to control parameter scans. Components Type Visibility Attributes Name Initial real, public :: range_i Initial value of scanned parameter. real, public :: range_f Final value of scanned parameter. logical, public :: log_scan Linear or Logarithmic scan.\nT-> log, F-> linear scan logical, public :: heat_s Controls supplementary heating calculation.\nT-> Heating Calculation; F-> No heating calculation. logical, public :: eigen_s Controls supplementary eigenfunction calculation.\nT-> Eigenfunction calculation;   F-> No eigenfunction Calculation. logical, public :: tensor_s Controls supplementary output of susceptibility tensor.\nT-> Output tensor; F-> Supress output. integer, public :: type_s Defines nature of parameter scans.\n Style: -1- Global two component Scan:\n     Type: 0 k_0-> k_1\n           1 theta_0 -> theta_1\n           2 k_fixed angle\nStyle: 0- Global Scan:\n     Type: 0 kperp\n           1 kpar\n           2 betap\n           3 vtp\nStyle: 1-nspec-> Species Scan:\n     Type: 0 tau_s\n           1 mu_s\n           2 alph_s\n           3 Q_s\n           4 D_s\n           5 vv_s integer, public :: style_s Defines nature of parameter scan.\n-1: Global two-component scan\n 0: Global one-component\n 1 to nspec: species specific parameter scan integer, public :: n_scan Number of output steps.\nn_scan*n_res Total steps taken. integer, public :: n_res Scan resolution between output steps.\nn_scan*n_res Total steps taken. real, public :: diff Step size for scanned parameter.\n Either (swf-swi)/(n_scan n_res)\n or\n (log10(swf)-log10(swi))/(n_scan n_res).","tags":"","url":"type/scanner.html"},{"title":"poly_rr – PLUME","text":"public  function poly_rr(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) Called by proc~~poly_rr~~CalledByGraph proc~poly_rr poly_rr interface~poly poly interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rrv->proc~poly_rr proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~poly_msk_rrv->proc~poly_rrv proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_rr.html"},{"title":"poly_dd – PLUME","text":"public  function poly_dd(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) Called by proc~~poly_dd~~CalledByGraph proc~poly_dd poly_dd interface~poly poly interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_ddv->proc~poly_dd proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~poly_msk_ddv->proc~poly_ddv proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_dd.html"},{"title":"poly_rc – PLUME","text":"public  function poly_rc(x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) Called by proc~~poly_rc~~CalledByGraph proc~poly_rc poly_rc interface~poly poly interface~poly->proc~poly_rc proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_rc.html"},{"title":"poly_cc – PLUME","text":"public  function poly_cc(x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) Called by proc~~poly_cc~~CalledByGraph proc~poly_cc poly_cc interface~poly poly interface~poly->proc~poly_cc proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_cc.html"},{"title":"poly_rrv – PLUME","text":"public  function poly_rrv(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) Calls proc~~poly_rrv~~CallsGraph proc~poly_rrv poly_rrv proc~poly_rr poly_rr proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_rrv~~CalledByGraph proc~poly_rrv poly_rrv interface~poly poly interface~poly->proc~poly_rrv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_msk_rrv->proc~poly_rrv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_rrv.html"},{"title":"poly_ddv – PLUME","text":"public  function poly_ddv(x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) Calls proc~~poly_ddv~~CallsGraph proc~poly_ddv poly_ddv proc~poly_dd poly_dd proc~poly_ddv->proc~poly_dd Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_ddv~~CalledByGraph proc~poly_ddv poly_ddv interface~poly poly interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_ddv->proc~poly_ddv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_ddv.html"},{"title":"poly_msk_rrv – PLUME","text":"public  function poly_msk_rrv(x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) Calls proc~~poly_msk_rrv~~CallsGraph proc~poly_msk_rrv poly_msk_rrv proc~poly_rrv poly_rrv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rr poly_rr proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_msk_rrv~~CalledByGraph proc~poly_msk_rrv poly_msk_rrv interface~poly poly interface~poly->proc~poly_msk_rrv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_msk_rrv.html"},{"title":"poly_msk_ddv – PLUME","text":"public  function poly_msk_ddv(x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x)) Calls proc~~poly_msk_ddv~~CallsGraph proc~poly_msk_ddv poly_msk_ddv proc~poly_ddv poly_ddv proc~poly_msk_ddv->proc~poly_ddv proc~poly_dd poly_dd proc~poly_ddv->proc~poly_dd Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~poly_msk_ddv~~CalledByGraph proc~poly_msk_ddv poly_msk_ddv interface~poly poly interface~poly->proc~poly_msk_ddv proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/poly_msk_ddv.html"},{"title":"assert1 – PLUME","text":"public  subroutine assert1(n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string Called by proc~~assert1~~CalledByGraph proc~assert1 assert1 interface~assert assert interface~assert->proc~assert1 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/assert1.html"},{"title":"assert2 – PLUME","text":"public  subroutine assert2(n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string Called by proc~~assert2~~CalledByGraph proc~assert2 assert2 interface~assert assert interface~assert->proc~assert2 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/assert2.html"},{"title":"assert3 – PLUME","text":"public  subroutine assert3(n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string Called by proc~~assert3~~CalledByGraph proc~assert3 assert3 interface~assert assert interface~assert->proc~assert3 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/assert3.html"},{"title":"assert4 – PLUME","text":"public  subroutine assert4(n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string Called by proc~~assert4~~CalledByGraph proc~assert4 assert4 interface~assert assert interface~assert->proc~assert4 proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/assert4.html"},{"title":"assert_v – PLUME","text":"public  subroutine assert_v(n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string Called by proc~~assert_v~~CalledByGraph proc~assert_v assert_v interface~assert assert interface~assert->proc~assert_v proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/assert_v.html"},{"title":"assert – PLUME","text":"public interface assert Calls interface~~assert~~CallsGraph interface~assert assert proc~assert1 assert1 interface~assert->proc~assert1 proc~assert2 assert2 interface~assert->proc~assert2 proc~assert3 assert3 interface~assert->proc~assert3 proc~assert4 assert4 interface~assert->proc~assert4 proc~assert_v assert_v interface~assert->proc~assert_v Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~assert~~CalledByGraph interface~assert assert proc~bessim bessim proc~bessim->interface~assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures public  subroutine assert1 (n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string public  subroutine assert2 (n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string public  subroutine assert3 (n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string public  subroutine assert4 (n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string public  subroutine assert_v (n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string","tags":"","url":"interface/assert.html"},{"title":"poly – PLUME","text":"public interface poly Calls interface~~poly~~CallsGraph interface~poly poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~poly~~CalledByGraph interface~poly poly proc~bessim0 bessim0 proc~bessim0->interface~poly proc~bessim1 bessim1 proc~bessim1->interface~poly proc~bessj0 bessj0 proc~bessj0->interface~poly proc~bessj1 bessj1 proc~bessj1->interface~poly proc~bessim bessim proc~bessim->proc~bessim0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures public  function poly_rr (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) public  function poly_rrv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_dd (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) public  function poly_ddv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) public  function poly_rc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_cc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_msk_rrv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_msk_ddv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x))","tags":"","url":"interface/poly.html"},{"title":"input_unit_exist – PLUME","text":"private  function input_unit_exist(nml, exist) Is a namelist already open? Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml logical, intent(out) :: exist Return Value integer Called by proc~~input_unit_exist~~CalledByGraph proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~input_unit_exist proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_indexed_namelist_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/input_unit_exist.html"},{"title":"input_unit – PLUME","text":"private  function input_unit(nml) Determine I/O unit. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Return Value integer Called by proc~~input_unit~~CalledByGraph proc~input_unit input_unit proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~input_unit proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_indexed_namelist_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/input_unit.html"},{"title":"read_in_params – PLUME","text":"public  subroutine read_in_params() Uses vars proc~~read_in_params~~UsesGraph proc~read_in_params read_in_params module~vars vars proc~read_in_params->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in system parameters.\nInput file is argument after executable:\n$ ./plume.e example.in Arguments None Calls proc~~read_in_params~~CallsGraph proc~read_in_params read_in_params proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_in_params->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_in_params->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_in_params->proc~get_unused_unit proc~spec_read spec_read proc~read_in_params->proc~spec_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_in_params~~CalledByGraph proc~read_in_params read_in_params program~plume plume program~plume->proc~read_in_params Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist params Variables Name Type Default Description betap real None Reference Species Parallel Thermal-to-Magnetic Pressure Ratio.\n8 pi n_ref T_ref,par/B&#94;2 kperp real None Wavenumber perpendicular to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_perp,ref/Omega_ref kpar real None Wavenumber parallel to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_t,ref,perp/Omega_ref vtp real None Parallel reference thermal velocity normalized to the speed of light.\nv_t,ref,par/c nspec integer None Number of species/components to be included in calculation. nscan integer 0 Number of parameter scans. option integer None Selection for the type of dispersion calculation to be undertaken.\n-1: Calculate disp(om) at a single (omega, gamma)\n 0: Calculate Roots for input plasma parameters.\n 1: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over plasma parameters, with range and type specified in .in file.\n 2: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over two-dimensional plasma parameters space,\n    with range and type specified in .in file.\n 3: deprecated\n 4: Make multiple maps of complex frequency space.\n 5: Find roots for parameters along a prescribed path\n    Path is set by solar wind models, with values calculated and\n    output by helper function (in development, the radial scan function.). nroot_max integer None Input specified nroots to follow. use_map logical None Determines method for selecting initial solutions.\nT-> Use map routine to determine solutions in defined regions of complex frequency space.\n    Map parameters determined by &maps list in .in file.\nF-> Read nroot_max initial guesses for complex frequency solutions.\n    Guesses determined by &guess_N lists in .in file. low_n logical .true. Toggle on low-n susceptibility suplementary calculation. new_low_n logical .true. Flag to use Revised low_n for LD/TTD separation. This modifies the Collisionless Power Absorption Calculation! IF TRUE THEN low_n MUST BE TRUE TOO! (GGH: 1/18/23) writeOut logical None Enables or suppressed output to screen. dataName character(len=100) None Data Subdirectory where output is stored. outputName character(len=100) None Common name string for output files. Namelist fpc Variables Name Type Default Description vperpmin real None vperpmax real None vparmin real None vparmax real None delv real None vxmin real None vxmax real None vymin real None vymax real None vzmin real None vzmax real None elecdircontribution real None","tags":"","url":"proc/read_in_params.html"},{"title":"spec_read – PLUME","text":"private  subroutine spec_read(is) Uses vars proc~~spec_read~~UsesGraph proc~spec_read spec_read module~vars vars proc~spec_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in species/component parameters. Arguments Type Intent Optional Attributes Name integer :: is Species index. Called by proc~~spec_read~~CalledByGraph proc~spec_read spec_read proc~read_in_params read_in_params proc~read_in_params->proc~spec_read program~plume plume program~plume->proc~read_in_params Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist species Variables Name Type Default Description tauS real None Parallel Temperature Ratio. muS real None Mass Ratio. alphS real None Temperature Anisotropy. Qs real None Relative charge ratio. Ds real None Density Ratio. vvS real None Relative Drift, normalized to reference Alfven velocity with .","tags":"","url":"proc/spec_read.html"},{"title":"read_map_input – PLUME","text":"public  subroutine read_map_input() Uses vars proc~~read_map_input~~UsesGraph proc~read_map_input read_map_input module~vars vars proc~read_map_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in parameters for bounds on mapping dispersion roots.\n Invokes map_read . Arguments None Calls proc~~read_map_input~~CallsGraph proc~read_map_input read_map_input proc~get_runname get_runname proc~read_map_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_map_input->proc~get_unused_unit proc~map_read map_read proc~read_map_input->proc~map_read Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_map_input~~CalledByGraph proc~read_map_input read_map_input program~plume plume program~plume->proc~read_map_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/read_map_input.html"},{"title":"map_read – PLUME","text":"private  subroutine map_read() Uses vars proc~~map_read~~UsesGraph proc~map_read map_read module~vars vars proc~map_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in frequency limits for map search of\n complex frequency solution space. Arguments None Called by proc~~map_read~~CalledByGraph proc~map_read map_read proc~read_map_input read_map_input proc~read_map_input->proc~map_read program~plume plume program~plume->proc~read_map_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist maps Variables Name Type Default Description loggridw logical None Set log or linear spacing for real frequency axis of the map search. loggridg logical None Set log or linear spacing for imaginary frequency axis of the map search. omi real None Lower bound on real frequency map search axis. omf real None Upper bound on real frequency map search axis. gami real None Lower bound on imaginary frequency map search axis. gamf real None Upper bound on imaginary frequency map search axis. positive_roots logical .false. Consider all solutions (false) or only solutions with positive real frequencies (true). nr integer 128 Number of grid points along real frequency axis\n Now read in by map_read ni integer 128 Number of grid points along imaginary frequency axis\n Now read in by map_read","tags":"","url":"proc/map_read.html"},{"title":"read_scan_input – PLUME","text":"public  subroutine read_scan_input() Uses vars proc~~read_scan_input~~UsesGraph proc~read_scan_input read_scan_input module~vars vars proc~read_scan_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in limits for scans in plasma parameter space.\n Invokes scan_read . Arguments None Calls proc~~read_scan_input~~CallsGraph proc~read_scan_input read_scan_input proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_scan_input->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_scan_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_scan_input->proc~get_unused_unit proc~scan_read scan_read proc~read_scan_input->proc~scan_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_scan_input~~CalledByGraph proc~read_scan_input read_scan_input program~plume plume program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/read_scan_input.html"},{"title":"scan_read – PLUME","text":"private  subroutine scan_read(is) Uses vars proc~~scan_read~~UsesGraph proc~scan_read scan_read module~vars vars proc~scan_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in scan parameters. Arguments Type Intent Optional Attributes Name integer :: is Scan index. Called by proc~~scan_read~~CalledByGraph proc~scan_read scan_read proc~read_scan_input read_scan_input proc~read_scan_input->proc~scan_read program~plume plume program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist scan_input Variables Name Type Default Description scan_type integer None Defines kind of parameter scans. swi real None Initial value of scanned parameter. swf real None Final value of scanned parameter. swlog logical None Linear or Logarithmic scan. scan_style integer None Defines number of components of scan. ns integer None Number of output steps. nres integer None Scan resolution between output steps. heating logical None Controls supplementary heating calculation. eigen logical None Controls supplementary eigenfunction calculation. tensor logical None Controls supplementary output of susceptibility tensor.","tags":"","url":"proc/scan_read.html"},{"title":"read_guess_input – PLUME","text":"public  subroutine read_guess_input() Uses vars proc~~read_guess_input~~UsesGraph proc~read_guess_input read_guess_input module~vars vars proc~read_guess_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in initial values for solutions.\n Invokes om_read . Arguments None Calls proc~~read_guess_input~~CallsGraph proc~read_guess_input read_guess_input proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_guess_input->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_guess_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_guess_input->proc~get_unused_unit proc~om_read om_read proc~read_guess_input->proc~om_read proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_guess_input~~CalledByGraph proc~read_guess_input read_guess_input program~plume plume program~plume->proc~read_guess_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/read_guess_input.html"},{"title":"om_read – PLUME","text":"private  subroutine om_read(is) Uses vars proc~~om_read~~UsesGraph proc~om_read om_read module~vars vars proc~om_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in initial guesses for complex frequencies of solutions. Arguments Type Intent Optional Attributes Name integer :: is Solution Index. Called by proc~~om_read~~CalledByGraph proc~om_read om_read proc~read_guess_input read_guess_input proc~read_guess_input->proc~om_read program~plume plume program~plume->proc~read_guess_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist guess Variables Name Type Default Description g_om real None Dummy values for real frequency component of solution. g_gam real None Dummy values for imaginary frequency component of solution.","tags":"","url":"proc/om_read.html"},{"title":"read_radial_input – PLUME","text":"public  subroutine read_radial_input() Uses vars proc~~read_radial_input~~UsesGraph proc~read_radial_input read_radial_input module~vars vars proc~read_radial_input->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in parameters for radial solar wind model scan.\n(in development). Arguments None Calls proc~~read_radial_input~~CallsGraph proc~read_radial_input read_radial_input proc~get_runname get_runname proc~read_radial_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_radial_input->proc~get_unused_unit proc~radial_read radial_read proc~read_radial_input->proc~radial_read proc~radial_read_0 radial_read_0 proc~read_radial_input->proc~radial_read_0 proc~radial_read_1 radial_read_1 proc~read_radial_input->proc~radial_read_1 proc~radial_read_2 radial_read_2 proc~read_radial_input->proc~radial_read_2 proc~radial_read_3 radial_read_3 proc~read_radial_input->proc~radial_read_3 proc~radial_read_4 radial_read_4 proc~read_radial_input->proc~radial_read_4 proc~radial_read_5 radial_read_5 proc~read_radial_input->proc~radial_read_5 proc~radial_read_6 radial_read_6 proc~read_radial_input->proc~radial_read_6 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_radial_input~~CalledByGraph proc~read_radial_input read_radial_input program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/read_radial_input.html"},{"title":"radial_read – PLUME","text":"private  subroutine radial_read() Uses vars proc~~radial_read~~UsesGraph proc~radial_read radial_read module~vars vars proc~radial_read->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan global parameters Arguments None Called by proc~~radial_read~~CalledByGraph proc~radial_read radial_read proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist radial_input Variables Name Type Default Description nRad integer None Number of points to scan in radial models. modelName character(len=100) None Input file name for radial model radial_heating logical None radial_eigen logical None k_scan integer None Determines wavevector values to include in radial scan\n0: single point in kperp, kpar space\n1: fixed kperp, scan over kpar\n2: fixed kpar,  scan over kperp\n3: fixed theta, scan over k\n4: fixed k, scan over theta\n5: plane scan over (kperp, kpar)\n6: plane scan over (k, theta)","tags":"","url":"proc/radial_read.html"},{"title":"radial_read_0 – PLUME","text":"private  subroutine radial_read_0() Uses vars proc~~radial_read_0~~UsesGraph proc~radial_read_0 radial_read_0 module~vars vars proc~radial_read_0->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and . Arguments None Called by proc~~radial_read_0~~CalledByGraph proc~radial_read_0 radial_read_0 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_0 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for readin.","tags":"","url":"proc/radial_read_0.html"},{"title":"radial_read_1 – PLUME","text":"private  subroutine radial_read_1() Uses vars proc~~radial_read_1~~UsesGraph proc~radial_read_1 radial_read_1 module~vars vars proc~radial_read_1->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_1~~CalledByGraph proc~radial_read_1 radial_read_1 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_1 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"proc/radial_read_1.html"},{"title":"radial_read_2 – PLUME","text":"private  subroutine radial_read_2() Uses vars proc~~radial_read_2~~UsesGraph proc~radial_read_2 radial_read_2 module~vars vars proc~radial_read_2->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_2~~CalledByGraph proc~radial_read_2 radial_read_2 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_2 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for fixed . nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"proc/radial_read_2.html"},{"title":"radial_read_3 – PLUME","text":"private  subroutine radial_read_3() Uses vars proc~~radial_read_3~~UsesGraph proc~radial_read_3 radial_read_3 module~vars vars proc~radial_read_3->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_3~~CalledByGraph proc~radial_read_3 radial_read_3 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_3 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for fixed value (in deg.) nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"proc/radial_read_3.html"},{"title":"radial_read_4 – PLUME","text":"private  subroutine radial_read_4() Uses vars proc~~radial_read_4~~UsesGraph proc~radial_read_4 radial_read_4 module~vars vars proc~radial_read_4->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None Called by proc~~radial_read_4~~CalledByGraph proc~radial_read_4 radial_read_4 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_4 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description k_1 real None Dummy variable for fixed value. theta_1 real None Dummy variable for initial value (in deg.). theta_2 real None Dummy variable for final value (in deg.). nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"proc/radial_read_4.html"},{"title":"radial_read_5 – PLUME","text":"private  subroutine radial_read_5() Uses vars proc~~radial_read_5~~UsesGraph proc~radial_read_5 radial_read_5 module~vars vars proc~radial_read_5->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None Called by proc~~radial_read_5~~CalledByGraph proc~radial_read_5 radial_read_5 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_5 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. nK2 integer None Number of output values. kres2 integer None Number of steps between output values. rad_log_perp logical None Logirithmic or linear scan. rad_log_par logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"proc/radial_read_5.html"},{"title":"radial_read_6 – PLUME","text":"private  subroutine radial_read_6() Uses vars proc~~radial_read_6~~UsesGraph proc~radial_read_6 radial_read_6 module~vars vars proc~radial_read_6->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None Called by proc~~radial_read_6~~CalledByGraph proc~radial_read_6 radial_read_6 proc~read_radial_input read_radial_input proc~read_radial_input->proc~radial_read_6 program~plume plume program~plume->proc~read_radial_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namelists Namelist k_range Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for initial value. theta_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. ntheta integer None Number of output values. thetares integer None Number of steps between output values. rad_log_k logical None Logirithmic or linear scan. rad_log_theta logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"proc/radial_read_6.html"},{"title":"get_runname – PLUME","text":"private  subroutine get_runname(runname) Get runname for output files from input argument\nby trimming '.in'. Arguments Type Intent Optional Attributes Name character(len=50), intent(out) :: runname Argument trimmed of '.in' string. Called by proc~~get_runname~~CalledByGraph proc~get_runname get_runname proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_runname proc~read_in_params read_in_params proc~read_in_params->proc~get_runname proc~read_map_input read_map_input proc~read_map_input->proc~get_runname proc~read_radial_input read_radial_input proc~read_radial_input->proc~get_runname proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_runname program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_map_input program~plume->proc~read_radial_input program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/get_runname.html"},{"title":"get_indexed_namelist_unit – PLUME","text":"private  subroutine get_indexed_namelist_unit(unit, nml, index_in) Extract namelist. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit character(len=*), intent(in) :: nml integer, intent(in) :: index_in Calls proc~~get_indexed_namelist_unit~~CallsGraph proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_unused_unit get_unused_unit proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~get_indexed_namelist_unit~~CalledByGraph proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_indexed_namelist_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/get_indexed_namelist_unit.html"},{"title":"get_unused_unit – PLUME","text":"public  subroutine get_unused_unit(unit) Find a I/O unit that is not currently open. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Called by proc~~get_unused_unit~~CalledByGraph proc~get_unused_unit get_unused_unit proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~get_unused_unit proc~read_guess_input read_guess_input proc~read_guess_input->proc~get_unused_unit proc~read_guess_input->proc~get_indexed_namelist_unit proc~read_in_params read_in_params proc~read_in_params->proc~get_unused_unit proc~read_in_params->proc~get_indexed_namelist_unit proc~read_map_input read_map_input proc~read_map_input->proc~get_unused_unit proc~read_radial_input read_radial_input proc~read_radial_input->proc~get_unused_unit proc~read_scan_input read_scan_input proc~read_scan_input->proc~get_unused_unit proc~read_scan_input->proc~get_indexed_namelist_unit program~plume plume program~plume->proc~read_guess_input program~plume->proc~read_in_params program~plume->proc~read_map_input program~plume->proc~read_radial_input program~plume->proc~read_scan_input Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/get_unused_unit.html"},{"title":"fs0hat – PLUME","text":"public  function fs0hat(vperp, vpar, hatV_s, aleph_s) Determines dimensionless species equilibrium VDF \\hat{fs0} at (vperp,vpar) Arguments Type Intent Optional Attributes Name real :: vperp normalized velocity space real :: vpar normalized velocity space real :: hatV_s normalized species drift velocity by wpar_s real :: aleph_s T_perp/T_parallel_s Return Value real Called by proc~~fs0hat~~CalledByGraph proc~fs0hat fs0hat proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~fs0hat proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~fs0hat proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~fs0hat proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/fs0hat.html"},{"title":"wparth_from_ratio – PLUME","text":"public  function wparth_from_ratio(is, ef) Uses vars disprels proc~~wparth_from_ratio~~UsesGraph proc~wparth_from_ratio wparth_from_ratio disprels disprels proc~wparth_from_ratio->disprels module~vars vars proc~wparth_from_ratio->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. (this is basically just a stray minus sign...) Arguments Type Intent Optional Attributes Name integer :: is species loop counter complex, dimension(1:3) :: ef electric field eigenmode Return Value complex Calls proc~~wparth_from_ratio~~CallsGraph proc~wparth_from_ratio wparth_from_ratio proc~calc_fs1 calc_fs1 proc~wparth_from_ratio->proc~calc_fs1 proc~fs0hat fs0hat proc~wparth_from_ratio->proc~fs0hat proc~bess0_s_prime bess0_s_prime proc~calc_fs1->proc~bess0_s_prime proc~bessj_s bessj_s proc~calc_fs1->proc~bessj_s proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~wparth_from_ratio~~CalledByGraph proc~wparth_from_ratio wparth_from_ratio proc~calc_wparth calc_wparth proc~calc_wparth->proc~wparth_from_ratio proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_wparth program~plume plume program~plume->proc~compute_fpc_cart Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/wparth_from_ratio.html"},{"title":"compute_fpc_cart – PLUME","text":"public  subroutine compute_fpc_cart(wrootindex) Uses vars disprels proc~~compute_fpc_cart~~UsesGraph proc~compute_fpc_cart compute_fpc_cart disprels disprels proc~compute_fpc_cart->disprels module~vars vars proc~compute_fpc_cart->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Computes the FPC associated with the linear fs1 and eigenfunction\nresponse on a square cartesian grid and writes FPC to file Arguments Type Intent Optional Attributes Name integer, intent(in) :: wrootindex Index of the root to compute fs1 and FPC for Calls proc~~compute_fpc_cart~~CallsGraph proc~compute_fpc_cart compute_fpc_cart calc_eigen calc_eigen proc~compute_fpc_cart->calc_eigen proc~calc_fs1 calc_fs1 proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~check_nbesmax check_nbesmax proc~compute_fpc_cart->proc~check_nbesmax proc~fs0hat fs0hat proc~compute_fpc_cart->proc~fs0hat rtsec rtsec proc~compute_fpc_cart->rtsec proc~bess0_s_prime bess0_s_prime proc~calc_fs1->proc~bess0_s_prime proc~bessj_s bessj_s proc~calc_fs1->proc~bessj_s proc~wparth_from_ratio wparth_from_ratio proc~calc_wparth->proc~wparth_from_ratio proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 proc~wparth_from_ratio->proc~calc_fs1 proc~wparth_from_ratio->proc~fs0hat interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~compute_fpc_cart~~CalledByGraph proc~compute_fpc_cart compute_fpc_cart program~plume plume program~plume->proc~compute_fpc_cart Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/compute_fpc_cart.html"},{"title":"compute_fpc_gyro – PLUME","text":"public  subroutine compute_fpc_gyro(wrootindex) Uses vars disprels proc~~compute_fpc_gyro~~UsesGraph proc~compute_fpc_gyro compute_fpc_gyro disprels disprels proc~compute_fpc_gyro->disprels module~vars vars proc~compute_fpc_gyro->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Computes the FPC associated with the linear fs1 and eigenfunction\nresponse on a square cartesian grid and writes fs1 and FPC to file Arguments Type Intent Optional Attributes Name integer, intent(in) :: wrootindex index of selected root Calls proc~~compute_fpc_gyro~~CallsGraph proc~compute_fpc_gyro compute_fpc_gyro calc_eigen calc_eigen proc~compute_fpc_gyro->calc_eigen proc~calc_fs1 calc_fs1 proc~compute_fpc_gyro->proc~calc_fs1 proc~check_nbesmax check_nbesmax proc~compute_fpc_gyro->proc~check_nbesmax proc~fs0hat fs0hat proc~compute_fpc_gyro->proc~fs0hat rtsec rtsec proc~compute_fpc_gyro->rtsec proc~bess0_s_prime bess0_s_prime proc~calc_fs1->proc~bess0_s_prime proc~bessj_s bessj_s proc~calc_fs1->proc~bessj_s proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~compute_fpc_gyro~~CalledByGraph proc~compute_fpc_gyro compute_fpc_gyro program~plume plume program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/compute_fpc_gyro.html"},{"title":"calc_fs1 – PLUME","text":"private  subroutine calc_fs1(omega, vperp, vpar, phi, ef, bf, hatV_s, q_s, aleph_s, tau_s, mu_s, aleph_r, elecdircontribution, exbar, fs0, fs1, epsSokhotski_Plemelj) Uses bessels nrtype vars proc~~calc_fs1~~UsesGraph proc~calc_fs1 calc_fs1 module~bessels bessels proc~calc_fs1->module~bessels module~nrtype nrtype proc~calc_fs1->module~nrtype module~vars vars proc~calc_fs1->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Determine species perturbed VDF fs1 at given (vperp,vpar,phi) Arguments Type Intent Optional Attributes Name complex, intent(in) :: omega Complex Frequency real, intent(in) :: vperp normalized velocity space real, intent(in) :: vpar normalized velocity space real, intent(in) :: phi azimuthal angle in velocity space complex, intent(in), dimension(1:3) :: ef E, B eigenfunctions in all 3 directions complex, intent(in), dimension(1:3) :: bf E, B eigenfunctions in all 3 directions real, intent(in) :: hatV_s Drift velocity norm to wpar_s real, intent(in) :: q_s normalized species charge real, intent(in) :: aleph_s T_perp/T_parallel_s real, intent(in) :: tau_s T_ref/T_s|_parallel real, intent(in) :: mu_s m_ref/m_s real, intent(in) :: aleph_r T_perp/T_parallel_R real, intent(in) :: elecdircontribution Sets components of Electric field\n(0 (DEFAULT) (or any other value) = Do not modify,\n1=Keep only Ex(i.e.Eperp1),\n2=Keep only Ey(i.e.Eperp2),\n3=Keep only Ez(i.e.Epar)) complex, intent(in) :: exbar normalizaiton factor real, intent(in) :: fs0 normalized zero order distribution complex, intent(out) :: fs1 first order distribution real, intent(in) :: epsSokhotski_Plemelj Small value for Sokhotski_Plemelj when computing moments of fs1; zero when just computing fs1 Calls proc~~calc_fs1~~CallsGraph proc~calc_fs1 calc_fs1 proc~bess0_s_prime bess0_s_prime proc~calc_fs1->proc~bess0_s_prime proc~bessj_s bessj_s proc~calc_fs1->proc~bessj_s proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~calc_fs1~~CalledByGraph proc~calc_fs1 calc_fs1 proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/calc_fs1.html"},{"title":"calc_wparth – PLUME","text":"private  subroutine calc_wparth(omega, wparth, is, ef) Uses vars proc~~calc_wparth~~UsesGraph proc~calc_wparth calc_wparth module~vars vars proc~calc_wparth->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. wrapper function to compute dimensional thermal velocity Arguments Type Intent Optional Attributes Name complex, intent(in) :: omega freq of solution complex, intent(out) :: wparth dimensional parallel thermal velocity integer :: is Spec conter complex, dimension(1:3) :: ef electric eigenmode Calls proc~~calc_wparth~~CallsGraph proc~calc_wparth calc_wparth proc~wparth_from_ratio wparth_from_ratio proc~calc_wparth->proc~wparth_from_ratio proc~calc_fs1 calc_fs1 proc~wparth_from_ratio->proc~calc_fs1 proc~fs0hat fs0hat proc~wparth_from_ratio->proc~fs0hat proc~bess0_s_prime bess0_s_prime proc~calc_fs1->proc~bess0_s_prime proc~bessj_s bessj_s proc~calc_fs1->proc~bessj_s proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~calc_wparth~~CalledByGraph proc~calc_wparth calc_wparth proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_wparth program~plume plume program~plume->proc~compute_fpc_cart Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/calc_wparth.html"},{"title":"check_nbesmax – PLUME","text":"public  subroutine check_nbesmax(vperpmax, tau_s, mu_s, aleph_r) Uses vars proc~~check_nbesmax~~UsesGraph proc~check_nbesmax check_nbesmax module~vars vars proc~check_nbesmax->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. We approximate the infitine sums, which include terms like j_n(b), as finite sums from n=-Nlarge to Nlarge.\n Since j_n(b) is pretty small when b = n/2,\nwe just make sure that n is large enough for all b (which is related to vperp) values Arguments Type Intent Optional Attributes Name real, intent(in) :: vperpmax max value to be computed in normalized velocity space real, intent(in) :: tau_s T_ref/T_s|_parallel real, intent(in) :: mu_s m_ref/m_s real, intent(in) :: aleph_r T_perp/T_parallel_R Called by proc~~check_nbesmax~~CalledByGraph proc~check_nbesmax check_nbesmax proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~check_nbesmax proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~check_nbesmax program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/check_nbesmax.html"},{"title":"bessim0 – PLUME","text":"public  function bessim0(x) Uses nrtype nrutil_trim proc~~bessim0~~UsesGraph proc~bessim0 bessim0 module~nrtype nrtype proc~bessim0->module~nrtype module~nrutil_trim nrutil_trim proc~bessim0->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Modified Bessel Function of order zero.\nDetermines I_0(x) e&#94;(-x) instead of I_0(x)\nto avoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. Calls proc~~bessim0~~CallsGraph proc~bessim0 bessim0 interface~poly poly proc~bessim0->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessim0~~CalledByGraph proc~bessim0 bessim0 proc~bessim bessim proc~bessim->proc~bessim0 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bessim0.html"},{"title":"bessim1 – PLUME","text":"public  function bessim1(x) Uses nrtype nrutil_trim proc~~bessim1~~UsesGraph proc~bessim1 bessim1 module~nrtype nrtype proc~bessim1->module~nrtype module~nrutil_trim nrutil_trim proc~bessim1->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Modified Bessel Function of order one.\nDetermines I_1(x) e&#94;(-x) instead of I_1(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. Calls proc~~bessim1~~CallsGraph proc~bessim1 bessim1 interface~poly poly proc~bessim1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bessim1.html"},{"title":"bessim – PLUME","text":"public  function bessim(n, x) Uses nrtype nrutil_trim proc~~bessim~~UsesGraph proc~bessim bessim module~nrtype nrtype proc~bessim->module~nrtype module~nrutil_trim nrutil_trim proc~bessim->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Modified Bessel Function of arbitrary order.\nDetermines I_n(x) e&#94;(-x) instead of I_n(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name integer(kind=I4B), intent(in) :: n Order of Modified Bessel Function. real(kind=SP), intent(in) :: x Order of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. Calls proc~~bessim~~CallsGraph proc~bessim bessim interface~assert assert proc~bessim->interface~assert proc~bessim0 bessim0 proc~bessim->proc~bessim0 proc~assert1 assert1 interface~assert->proc~assert1 proc~assert2 assert2 interface~assert->proc~assert2 proc~assert3 assert3 interface~assert->proc~assert3 proc~assert4 assert4 interface~assert->proc~assert4 proc~assert_v assert_v interface~assert->proc~assert_v interface~poly poly proc~bessim0->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bessim.html"},{"title":"bessj0 – PLUME","text":"public  function bessj0(x) Uses nrtype nrutil_trim proc~~bessj0~~UsesGraph proc~bessj0 bessj0 module~nrtype nrtype proc~bessj0->module~nrtype module~nrutil_trim nrutil_trim proc~bessj0->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Return Value real(kind=SP) Calls proc~~bessj0~~CallsGraph proc~bessj0 bessj0 interface~poly poly proc~bessj0->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessj0~~CalledByGraph proc~bessj0 bessj0 proc~bessj_s bessj_s proc~bessj_s->proc~bessj0 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bessj0.html"},{"title":"bessj1 – PLUME","text":"public  function bessj1(x) Uses nrtype nrutil_trim proc~~bessj1~~UsesGraph proc~bessj1 bessj1 module~nrtype nrtype proc~bessj1->module~nrtype module~nrutil_trim nrutil_trim proc~bessj1->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Return Value real(kind=SP) Calls proc~~bessj1~~CallsGraph proc~bessj1 bessj1 interface~poly poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessj1~~CalledByGraph proc~bessj1 bessj1 proc~bessj_s bessj_s proc~bessj_s->proc~bessj1 proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bessj1.html"},{"title":"bessj_s – PLUME","text":"public  function bessj_s(n, x) Uses nrtype nrutil_trim proc~~bessj_s~~UsesGraph proc~bessj_s bessj_s module~nrtype nrtype proc~bessj_s->module~nrtype module~nrutil_trim nrutil_trim proc~bessj_s->module~nrutil_trim module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Arguments Type Intent Optional Attributes Name integer(kind=I4B) :: n real(kind=SP), intent(in) :: x Return Value real(kind=SP) Calls proc~~bessj_s~~CallsGraph proc~bessj_s bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessj_s~~CalledByGraph proc~bessj_s bessj_s proc~bess0_s_prime bess0_s_prime proc~bess0_s_prime->proc~bessj_s proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bessj_s proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bessj_s.html"},{"title":"bess0_s_prime – PLUME","text":"public  function bess0_s_prime(x) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value real Calls proc~~bess0_s_prime~~CallsGraph proc~bess0_s_prime bess0_s_prime proc~bessj_s bessj_s proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bess0_s_prime~~CalledByGraph proc~bess0_s_prime bess0_s_prime proc~calc_fs1 calc_fs1 proc~calc_fs1->proc~bess0_s_prime proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->proc~calc_fs1 proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->proc~calc_fs1 proc~calc_wparth->proc~wparth_from_ratio program~plume plume program~plume->proc~compute_fpc_cart program~plume->proc~compute_fpc_gyro Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/bess0_s_prime.html"},{"title":"nrutil_trim – PLUME","text":"Numerical Recipes Types Utilized in PLUME. Uses nrtype module~~nrutil_trim~~UsesGraph module~nrutil_trim nrutil_trim module~nrtype nrtype module~nrutil_trim->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~nrutil_trim~~UsedByGraph module~nrutil_trim nrutil_trim proc~bessim bessim proc~bessim->module~nrutil_trim proc~bessim0 bessim0 proc~bessim0->module~nrutil_trim proc~bessim1 bessim1 proc~bessim1->module~nrutil_trim proc~bessj0 bessj0 proc~bessj0->module~nrutil_trim proc~bessj1 bessj1 proc~bessj1->module~nrutil_trim proc~bessj_s bessj_s proc~bessj_s->module~nrutil_trim Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer(kind=I4B), public, parameter :: NPAR_ARTH = 16 integer(kind=I4B), public, parameter :: NPAR2_ARTH = 8 integer(kind=I4B), public, parameter :: NPAR_GEOP = 4 integer(kind=I4B), public, parameter :: NPAR2_GEOP = 2 integer(kind=I4B), public, parameter :: NPAR_CUMSUM = 16 integer(kind=I4B), public, parameter :: NPAR_CUMPROD = 8 integer(kind=I4B), public, parameter :: NPAR_POLY = 8 integer(kind=I4B), public, parameter :: NPAR_POLYTERM = 8 Interfaces public        interface assert public  subroutine assert1 (n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string public  subroutine assert2 (n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string public  subroutine assert3 (n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string public  subroutine assert4 (n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string public  subroutine assert_v (n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string public        interface poly public  function poly_rr (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) public  function poly_rrv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_dd (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) public  function poly_ddv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) public  function poly_rc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_cc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_msk_rrv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_msk_ddv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x)) Functions public  function poly_rr (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP) public  function poly_dd (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP) public  function poly_rc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_cc (x, coeffs) Arguments Type Intent Optional Attributes Name complex(kind=SPC), intent(in) :: x complex(kind=SPC), intent(in), DIMENSION(:) :: coeffs Return Value complex(kind=SPC) public  function poly_rrv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_ddv (x, coeffs) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs Return Value real(kind=DP), DIMENSION(size(x)) public  function poly_msk_rrv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in), DIMENSION(:) :: x real(kind=SP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=SP), DIMENSION(size(x)) public  function poly_msk_ddv (x, coeffs, mask) Arguments Type Intent Optional Attributes Name real(kind=DP), intent(in), DIMENSION(:) :: x real(kind=DP), intent(in), DIMENSION(:) :: coeffs logical(kind=LGT), intent(in), DIMENSION(:) :: mask Return Value real(kind=DP), DIMENSION(size(x)) Subroutines public  subroutine assert1 (n1, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 character(len=*), intent(in) :: string public  subroutine assert2 (n1, n2, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 character(len=*), intent(in) :: string public  subroutine assert3 (n1, n2, n3, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 character(len=*), intent(in) :: string public  subroutine assert4 (n1, n2, n3, n4, string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: n1 logical, intent(in) :: n2 logical, intent(in) :: n3 logical, intent(in) :: n4 character(len=*), intent(in) :: string public  subroutine assert_v (n, string) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: n character(len=*), intent(in) :: string","tags":"","url":"module/nrutil_trim.html"},{"title":"functions – PLUME","text":"Calculates Misc. functions, esp. I/O operations. Used by module~~functions~~UsedByGraph module~functions functions program~plume plume program~plume->module~functions Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, private :: is Index for scan and species loops. integer, private :: unit Custom index for I/O. integer, private, parameter :: stdout_unit = 6 Standard index for I/O. integer, private, save :: input_unit_no Index for reading in files. integer, private, save :: error_unit_no = stdout_unit Index for outputing error messages. character(len=50), private :: runname String for input file parameters. Functions private  function input_unit_exist (nml, exist) Is a namelist already open? Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml logical, intent(out) :: exist Return Value integer private  function input_unit (nml) Determine I/O unit. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Return Value integer Subroutines public  subroutine read_in_params () Read in system parameters.\nInput file is argument after executable:\n$ ./plume.e example.in Arguments None private  subroutine spec_read (is) Subroutine for reading in species/component parameters. Arguments Type Intent Optional Attributes Name integer :: is Species index. public  subroutine read_map_input () Read in parameters for bounds on mapping dispersion roots.\n Invokes map_read . Arguments None private  subroutine map_read () Subroutine for reading in frequency limits for map search of\n complex frequency solution space. Arguments None public  subroutine read_scan_input () Read in limits for scans in plasma parameter space.\n Invokes scan_read . Arguments None private  subroutine scan_read (is) Subroutine for reading in scan parameters. Arguments Type Intent Optional Attributes Name integer :: is Scan index. public  subroutine read_guess_input () Read in initial values for solutions.\n Invokes om_read . Arguments None private  subroutine om_read (is) Subroutine for reading in initial guesses for complex frequencies of solutions. Arguments Type Intent Optional Attributes Name integer :: is Solution Index. public  subroutine read_radial_input () Read in parameters for radial solar wind model scan.\n(in development). Arguments None private  subroutine radial_read () Subroutine for reading in radial scan global parameters Arguments None private  subroutine radial_read_0 () Subroutine for reading in radial scan parameters\nwith fixed and . Arguments None private  subroutine radial_read_1 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_2 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_3 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_4 () Subroutine for reading in radial scan parameters\nwith fixed and varying . Arguments None private  subroutine radial_read_5 () Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None private  subroutine radial_read_6 () Subroutine for reading in radial scan parameters\nfor 2D scan over and . Arguments None private  subroutine get_runname (runname) Get runname for output files from input argument\nby trimming '.in'. Arguments Type Intent Optional Attributes Name character(len=50), intent(out) :: runname Argument trimmed of '.in' string. private  subroutine get_indexed_namelist_unit (unit, nml, index_in) Extract namelist. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit character(len=*), intent(in) :: nml integer, intent(in) :: index_in public  subroutine get_unused_unit (unit) Find a I/O unit that is not currently open. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit","tags":"","url":"module/functions.html"},{"title":"fpc – PLUME","text":"Perturbed distribution function calculation from eigenfunctions and\nassociated routines to calculate the FPC from it Used by module~~fpc~~UsedByGraph module~fpc fpc program~plume plume program~plume->module~fpc Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial real, public :: bs_last = 0.0 Last Bessel function argument, used to store repeated calculations for efficiency real, public, allocatable :: jbess (:) Regular (i.e. not the modified used elsewhere) Bessel functions, stored for efficiency Functions public  function fs0hat (vperp, vpar, hatV_s, aleph_s) Determines dimensionless species equilibrium VDF \\hat{fs0} at (vperp,vpar) Arguments Type Intent Optional Attributes Name real :: vperp normalized velocity space real :: vpar normalized velocity space real :: hatV_s normalized species drift velocity by wpar_s real :: aleph_s T_perp/T_parallel_s Return Value real public  function wparth_from_ratio (is, ef) (this is basically just a stray minus sign...) Arguments Type Intent Optional Attributes Name integer :: is species loop counter complex, dimension(1:3) :: ef electric field eigenmode Return Value complex Subroutines public  subroutine compute_fpc_cart (wrootindex) Computes the FPC associated with the linear fs1 and eigenfunction\nresponse on a square cartesian grid and writes FPC to file Arguments Type Intent Optional Attributes Name integer, intent(in) :: wrootindex Index of the root to compute fs1 and FPC for public  subroutine compute_fpc_gyro (wrootindex) Computes the FPC associated with the linear fs1 and eigenfunction\nresponse on a square cartesian grid and writes fs1 and FPC to file Arguments Type Intent Optional Attributes Name integer, intent(in) :: wrootindex index of selected root private  subroutine calc_fs1 (omega, vperp, vpar, phi, ef, bf, hatV_s, q_s, aleph_s, tau_s, mu_s, aleph_r, elecdircontribution, exbar, fs0, fs1, epsSokhotski_Plemelj) Determine species perturbed VDF fs1 at given (vperp,vpar,phi) Arguments Type Intent Optional Attributes Name complex, intent(in) :: omega Complex Frequency real, intent(in) :: vperp normalized velocity space real, intent(in) :: vpar normalized velocity space real, intent(in) :: phi azimuthal angle in velocity space complex, intent(in), dimension(1:3) :: ef E, B eigenfunctions in all 3 directions complex, intent(in), dimension(1:3) :: bf E, B eigenfunctions in all 3 directions real, intent(in) :: hatV_s Drift velocity norm to wpar_s real, intent(in) :: q_s normalized species charge real, intent(in) :: aleph_s T_perp/T_parallel_s real, intent(in) :: tau_s T_ref/T_s|_parallel real, intent(in) :: mu_s m_ref/m_s real, intent(in) :: aleph_r T_perp/T_parallel_R real, intent(in) :: elecdircontribution Sets components of Electric field\n(0 (DEFAULT) (or any other value) = Do not modify,\n1=Keep only Ex(i.e.Eperp1),\n2=Keep only Ey(i.e.Eperp2),\n3=Keep only Ez(i.e.Epar)) complex, intent(in) :: exbar normalizaiton factor real, intent(in) :: fs0 normalized zero order distribution complex, intent(out) :: fs1 first order distribution real, intent(in) :: epsSokhotski_Plemelj Small value for Sokhotski_Plemelj when computing moments of fs1; zero when just computing fs1 private  subroutine calc_wparth (omega, wparth, is, ef) wrapper function to compute dimensional thermal velocity Arguments Type Intent Optional Attributes Name complex, intent(in) :: omega freq of solution complex, intent(out) :: wparth dimensional parallel thermal velocity integer :: is Spec conter complex, dimension(1:3) :: ef electric eigenmode public  subroutine check_nbesmax (vperpmax, tau_s, mu_s, aleph_r) We approximate the infitine sums, which include terms like j_n(b), as finite sums from n=-Nlarge to Nlarge.\n Since j_n(b) is pretty small when b = n/2,\nwe just make sure that n is large enough for all b (which is related to vperp) values Arguments Type Intent Optional Attributes Name real, intent(in) :: vperpmax max value to be computed in normalized velocity space real, intent(in) :: tau_s T_ref/T_s|_parallel real, intent(in) :: mu_s m_ref/m_s real, intent(in) :: aleph_r T_perp/T_parallel_R","tags":"","url":"module/fpc.html"},{"title":"nrtype – PLUME","text":"Numerical Recipes Types Utilized in PLUME. Used by module~~nrtype~~UsedByGraph module~nrtype nrtype module~nrutil_trim nrutil_trim module~nrutil_trim->module~nrtype proc~bessim bessim proc~bessim->module~nrtype proc~bessim->module~nrutil_trim proc~bessim0 bessim0 proc~bessim0->module~nrtype proc~bessim0->module~nrutil_trim proc~bessim1 bessim1 proc~bessim1->module~nrtype proc~bessim1->module~nrutil_trim proc~bessj0 bessj0 proc~bessj0->module~nrtype proc~bessj0->module~nrutil_trim proc~bessj1 bessj1 proc~bessj1->module~nrtype proc~bessj1->module~nrutil_trim proc~bessj_s bessj_s proc~bessj_s->module~nrtype proc~bessj_s->module~nrutil_trim proc~calc_fs1 calc_fs1 proc~calc_fs1->module~nrtype Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, public, parameter :: I4B = SELECTED_INT_KIND(9) integer, public, parameter :: I2B = SELECTED_INT_KIND(4) integer, public, parameter :: I1B = SELECTED_INT_KIND(2) integer, public, parameter :: SP = KIND(1.0) integer, public, parameter :: DP = KIND(1.0D0) integer, public, parameter :: SPC = KIND((1.0, 1.0)) integer, public, parameter :: DPC = KIND((1.0D0, 1.0D0)) integer, public, parameter :: LGT = KIND(.true.) real(kind=SP), public, parameter :: PI = 3.141592653589793238462643383279502884197_sp real(kind=SP), public, parameter :: PIO2 = 1.57079632679489661923132169163975144209858_sp real(kind=SP), public, parameter :: TWOPI = 6.283185307179586476925286766559005768394_sp real(kind=SP), public, parameter :: SQRT2 = 1.41421356237309504880168872420969807856967_sp real(kind=SP), public, parameter :: EULER = 0.5772156649015328606065120900824024310422_sp real(kind=DP), public, parameter :: PI_D = 3.141592653589793238462643383279502884197_dp real(kind=DP), public, parameter :: PIO2_D = 1.57079632679489661923132169163975144209858_dp real(kind=DP), public, parameter :: TWOPI_D = 6.283185307179586476925286766559005768394_dp Derived Types type, public :: sprs2_sp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=SP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol type, public :: sprs2_dp Components Type Visibility Attributes Name Initial integer(kind=I4B), public :: n integer(kind=I4B), public :: len real(kind=DP), public, DIMENSION(:), POINTER :: val integer(kind=I4B), public, DIMENSION(:), POINTER :: irow integer(kind=I4B), public, DIMENSION(:), POINTER :: jcol","tags":"","url":"module/nrtype.html"},{"title":"bessels – PLUME","text":"Calculates Bessel Functions necessary for the dispersion calculation. Used by module~~bessels~~UsedByGraph module~bessels bessels proc~calc_fs1 calc_fs1 proc~calc_fs1->module~bessels Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Functions public  function bessim0 (x) Calculates the Modified Bessel Function of order zero.\nDetermines I_0(x) e&#94;(-x) instead of I_0(x)\nto avoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. public  function bessim1 (x) Calculates the Modified Bessel Function of order one.\nDetermines I_1(x) e&#94;(-x) instead of I_1(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Argument of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. public  function bessim (n, x) Calculates the Modified Bessel Function of arbitrary order.\nDetermines I_n(x) e&#94;(-x) instead of I_n(x) to\navoid large argument problems. Arguments Type Intent Optional Attributes Name integer(kind=I4B), intent(in) :: n Order of Modified Bessel Function. real(kind=SP), intent(in) :: x Order of Modified Bessel Function. Return Value real(kind=SP) Returned value of the Bessel Function calculation. public  function bessj0 (x) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Return Value real(kind=SP) public  function bessj1 (x) Arguments Type Intent Optional Attributes Name real(kind=SP), intent(in) :: x Return Value real(kind=SP) public  function bessj_s (n, x) Arguments Type Intent Optional Attributes Name integer(kind=I4B) :: n real(kind=SP), intent(in) :: x Return Value real(kind=SP) public  function bess0_s_prime (x) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value real","tags":"","url":"module/bessels.html"},{"title":"vars – PLUME","text":"Contains all global variables. Used by module~~vars~~UsedByGraph module~vars vars proc~calc_fs1 calc_fs1 proc~calc_fs1->module~vars proc~calc_wparth calc_wparth proc~calc_wparth->module~vars proc~check_nbesmax check_nbesmax proc~check_nbesmax->module~vars proc~compute_fpc_cart compute_fpc_cart proc~compute_fpc_cart->module~vars proc~compute_fpc_gyro compute_fpc_gyro proc~compute_fpc_gyro->module~vars proc~map_read map_read proc~map_read->module~vars proc~om_read om_read proc~om_read->module~vars proc~radial_read radial_read proc~radial_read->module~vars proc~radial_read_0 radial_read_0 proc~radial_read_0->module~vars proc~radial_read_1 radial_read_1 proc~radial_read_1->module~vars proc~radial_read_2 radial_read_2 proc~radial_read_2->module~vars proc~radial_read_3 radial_read_3 proc~radial_read_3->module~vars proc~radial_read_4 radial_read_4 proc~radial_read_4->module~vars proc~radial_read_5 radial_read_5 proc~radial_read_5->module~vars proc~radial_read_6 radial_read_6 proc~radial_read_6->module~vars proc~read_guess_input read_guess_input proc~read_guess_input->module~vars proc~read_in_params read_in_params proc~read_in_params->module~vars proc~read_map_input read_map_input proc~read_map_input->module~vars proc~read_radial_input read_radial_input proc~read_radial_input->module~vars proc~read_scan_input read_scan_input proc~read_scan_input->module~vars proc~scan_read scan_read proc~scan_read->module~vars proc~spec_read spec_read proc~spec_read->module~vars proc~wparth_from_ratio wparth_from_ratio proc~wparth_from_ratio->module~vars program~plume plume program~plume->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial real, public, target :: betap Reference Species Parallel Thermal-to-Magnetic Pressure Ratio.\n8 pi n_ref T_ref,par/B&#94;2 real, public, target :: kperp Wavenumber perpendicular to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_perp,ref/Omega_ref real, public, target :: kpar Wavenumber parallel to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_t,ref,perp/Omega_ref real, public, target :: vtp Parallel reference thermal velocity normalized to the speed of light.\nv_t,ref,par/c integer, public :: nspec Number of species/components to be included in calculation. integer, public :: nscan = 0 Number of parameter scans. type( specie ), public, dimension(:), allocatable, target :: spec Dimensionless Species/Component Parameters. type( specie ), public, dimension(:, :), allocatable, target :: rad_spec Array for Varying Species/Component Parameters (under development). type( scanner ), public, dimension(:), allocatable :: scan Array of scan parameters for all scans to be calculated. type( scanner ), public, dimension(:), allocatable :: rad_scan Array of scan parameters for extended parameter scans (under development). real, public, pointer :: sw Parameter Sweep parameter values. real, public, pointer :: sw2 Parameter Sweep parameter values. real, public, pointer :: sw3 Parameter Sweep parameter values. real, public, pointer :: sw4 Parameter Sweep parameter values. complex, public, dimension(:, :, :), allocatable :: susc Susceptibility tensor.\n(1:nspec,1:3,1:3) with the 3x3 subarray arranged as:\n(1,1) xx; (1,2) xy; (1,3) xz;\n(2,1) yx; (2,2) yy; (2,3) yz;\n(3,1) zx; (3,2) zy; (3,3) zz; complex, public, dimension(:, :, :, :), allocatable :: susc_low low-n components of the susceptibility tensor.\n(1:nspec,1:3,1:3,0:1) with the 3x3 subarray arranged as susc.\nThe final index contains the n=0 and n=\\pm 1 contributions. logical, public :: low_n = .true. Toggle on low-n susceptibility suplementary calculation. logical, public :: new_low_n = .true. Flag to use Revised low_n for LD/TTD separation. This modifies the Collisionless Power Absorption Calculation! IF TRUE THEN low_n MUST BE TRUE TOO! (GGH: 1/18/23) complex, public, dimension(3, 3) :: lam Matrix in Wave equation. integer, public :: option Selection for the type of dispersion calculation to be undertaken.\n-1: Calculate disp(om) at a single (omega, gamma)\n 0: Calculate Roots for input plasma parameters.\n 1: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over plasma parameters, with range and type specified in .in file.\n 2: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over two-dimensional plasma parameters space,\n    with range and type specified in .in file.\n 3: deprecated\n 4: Make multiple maps of complex frequency space.\n 5: Find roots for parameters along a prescribed path\n    Path is set by solar wind models, with values calculated and\n    output by helper function (in development, the radial scan function.). logical, public :: writeOut Enables or suppressed output to screen. character(len=100), public :: dataName Data Subdirectory where output is stored. character(len=100), public :: outputName Common name string for output files. character(len=100), public :: print_Name Additional string for output files. logical, public :: use_map Determines method for selecting initial solutions.\nT-> Use map routine to determine solutions in defined regions of complex frequency space.\n    Map parameters determined by &maps list in .in file.\nF-> Read nroot_max initial guesses for complex frequency solutions.\n    Guesses determined by &guess_N lists in .in file. logical, public :: loggridw Set log or linear spacing for real frequency axis of the map search. logical, public :: loggridg Set log or linear spacing for imaginary frequency axis of the map search. real, public :: omi Lower bound on real frequency map search axis. real, public :: omf Upper bound on real frequency map search axis. real, public :: gami Lower bound on imaginary frequency map search axis. real, public :: gamf Upper bound on imaginary frequency map search axis. logical, public :: positive_roots = .false. Consider all solutions (false) or only solutions with positive real frequencies (true). integer, public :: nr = 128 Number of grid points along real frequency axis\n Now read in by map_read integer, public :: ni = 128 Number of grid points along imaginary frequency axis\n Now read in by map_read integer, public, parameter :: numroots = 500 Maximum number of minima to keep for a further refinement from a map search. integer, public, parameter :: nbesmax = 15 integer, public :: nRad Number of points to scan in radial models. character(len=100), public :: modelName Input file name for radial model real, public, dimension(:), allocatable :: radius Radial distance from the Sun, in Rs. real, public, dimension(:), allocatable :: beta_rad real, public, dimension(:), allocatable :: vtp_rad logical, public :: radial_heating logical, public :: radial_eigen integer, public :: k_scan Determines wavevector values to include in radial scan\n0: single point in kperp, kpar space\n1: fixed kperp, scan over kpar\n2: fixed kpar,  scan over kperp\n3: fixed theta, scan over k\n4: fixed k, scan over theta\n5: plane scan over (kperp, kpar)\n6: plane scan over (k, theta) real, public :: pi real, public :: vperpmin real, public :: vperpmax real, public :: vparmin real, public :: vparmax real, public :: vxmin real, public :: vxmax real, public :: vymin real, public :: vymax real, public :: vzmin real, public :: vzmax real, public :: delv real, public :: elecdircontribution logical, public :: computemoment = .true. Enables computation of fs1 moments; not recommended as it is prone to inaccuracies and is unnecessary give that analytical moments are computed. Used for verifying self consistency of the code instead.\nNote this integrals are very challenging numerically using our current integration scheme. It is common to be off by at least half an order of magnitude in certain domains.\nThis is for debug only. Please use the analytic moments. real, public :: EpsilonSokhotski_Plemelj = 0.01 Epsilon in the Sokhotski–Plemelj theorem, which states int f(x)/(x-a) dx can be approximated using eps->0 int f(x)/(x-a+i eps) dx to 'better' handle the singularity  numerically. This value should be left as zero, only be used by advanced users, and only when the user is computing moments for comparison to the analytic form (because it requires a very small delta v to 'work') (Remember to recompile!) real, public :: vxshift = 0.0 shifts grid along vx- used to test stiffness of fs1 in JETPLUME (DEBUG ONLY- keep as zero otherwise) real, public :: vyshift = 0.0 shifts grid along vy- used to test stiffness of fs1 in JETPLUME (DEBUG ONLY- keep as zero otherwise) real, public :: vzshift = 0.0 shifts grid along vz- used to test stiffness of fs1 in JETPLUME (DEBUG ONLY- keep as zero otherwise) logical, private :: useOnlyReferenceWpar = .false. compute the reference thermal velocity for reference and then 'convert' using temperature ratios, or for each species individually.\nOnly used for numerical moments of fs1, which are only for debug. For most users, this value is irrelevant.\nChoice is approximatley equivalent in domain where error in integrals of fs1 for all species are small, but those domains are rare with physical values\nInstead, I recommend setting this to false to allow the error to be 'absorbed' in the calculation of wparS integer, public :: nroots Number of roots found. real, public, dimension(1:2, 1:numroots) :: wroots Real and Imaginary components of each solution. complex, public :: omega_val var used to pass omega to rtsec in fpc.f90 integer, public :: nroot_max Input specified nroots to follow. Derived Types type, public :: specie Species Input Parameters Components Type Visibility Attributes Name Initial real, public :: tau_s Relative Temperature ratio. real, public :: mu_s Relative Mass ratio. real, public :: alph_s Temperature Anisotropy. real, public :: Q_s Relative charge ratio. real, public :: D_s Density Ratio. real, public :: vv_s Relative Drift, normalized to reference Alfven velocity with . type, public :: scanner Parameters to control parameter scans. Components Type Visibility Attributes Name Initial real, public :: range_i Initial value of scanned parameter. real, public :: range_f Final value of scanned parameter. logical, public :: log_scan Linear or Logarithmic scan.\nT-> log, F-> linear scan logical, public :: heat_s Controls supplementary heating calculation.\nT-> Heating Calculation; F-> No heating calculation. logical, public :: eigen_s Controls supplementary eigenfunction calculation.\nT-> Eigenfunction calculation;   F-> No eigenfunction Calculation. logical, public :: tensor_s Controls supplementary output of susceptibility tensor.\nT-> Output tensor; F-> Supress output. integer, public :: type_s Defines nature of parameter scans.\n Style: -1- Global two component Scan:\n     Type: 0 k_0-> k_1\n           1 theta_0 -> theta_1\n           2 k_fixed angle\nStyle: 0- Global Scan:\n     Type: 0 kperp\n           1 kpar\n           2 betap\n           3 vtp\nStyle: 1-nspec-> Species Scan:\n     Type: 0 tau_s\n           1 mu_s\n           2 alph_s\n           3 Q_s\n           4 D_s\n           5 vv_s integer, public :: style_s Defines nature of parameter scan.\n-1: Global two-component scan\n 0: Global one-component\n 1 to nspec: species specific parameter scan integer, public :: n_scan Number of output steps.\nn_scan*n_res Total steps taken. integer, public :: n_res Scan resolution between output steps.\nn_scan*n_res Total steps taken. real, public :: diff Step size for scanned parameter.\n Either (swf-swi)/(n_scan n_res)\n or\n (log10(swf)-log10(swi))/(n_scan n_res).","tags":"","url":"module/vars.html"},{"title":"plume – PLUME","text":"Uses functions vars fpc disprels program~~plume~~UsesGraph program~plume plume disprels disprels program~plume->disprels module~fpc fpc program~plume->module~fpc module~functions functions program~plume->module~functions module~vars vars program~plume->module~vars Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calls program~~plume~~CallsGraph program~plume plume map_scan map_scan program~plume->map_scan map_search map_search program~plume->map_search om_double_scan om_double_scan program~plume->om_double_scan om_scan om_scan program~plume->om_scan proc~compute_fpc_cart compute_fpc_cart program~plume->proc~compute_fpc_cart proc~compute_fpc_gyro compute_fpc_gyro program~plume->proc~compute_fpc_gyro proc~read_guess_input read_guess_input program~plume->proc~read_guess_input proc~read_in_params read_in_params program~plume->proc~read_in_params proc~read_map_input read_map_input program~plume->proc~read_map_input proc~read_radial_input read_radial_input program~plume->proc~read_radial_input proc~read_scan_input read_scan_input program~plume->proc~read_scan_input radial_scan radial_scan program~plume->radial_scan refine_guess refine_guess program~plume->refine_guess test_disp test_disp program~plume->test_disp calc_eigen calc_eigen proc~compute_fpc_cart->calc_eigen proc~calc_fs1 calc_fs1 proc~compute_fpc_cart->proc~calc_fs1 proc~calc_wparth calc_wparth proc~compute_fpc_cart->proc~calc_wparth proc~check_nbesmax check_nbesmax proc~compute_fpc_cart->proc~check_nbesmax proc~fs0hat fs0hat proc~compute_fpc_cart->proc~fs0hat rtsec rtsec proc~compute_fpc_cart->rtsec proc~compute_fpc_gyro->calc_eigen proc~compute_fpc_gyro->proc~calc_fs1 proc~compute_fpc_gyro->proc~check_nbesmax proc~compute_fpc_gyro->proc~fs0hat proc~compute_fpc_gyro->rtsec proc~get_indexed_namelist_unit get_indexed_namelist_unit proc~read_guess_input->proc~get_indexed_namelist_unit proc~get_runname get_runname proc~read_guess_input->proc~get_runname proc~get_unused_unit get_unused_unit proc~read_guess_input->proc~get_unused_unit proc~om_read om_read proc~read_guess_input->proc~om_read proc~read_in_params->proc~get_indexed_namelist_unit proc~read_in_params->proc~get_runname proc~read_in_params->proc~get_unused_unit proc~spec_read spec_read proc~read_in_params->proc~spec_read proc~read_map_input->proc~get_runname proc~read_map_input->proc~get_unused_unit proc~map_read map_read proc~read_map_input->proc~map_read proc~read_radial_input->proc~get_runname proc~read_radial_input->proc~get_unused_unit proc~radial_read radial_read proc~read_radial_input->proc~radial_read proc~radial_read_0 radial_read_0 proc~read_radial_input->proc~radial_read_0 proc~radial_read_1 radial_read_1 proc~read_radial_input->proc~radial_read_1 proc~radial_read_2 radial_read_2 proc~read_radial_input->proc~radial_read_2 proc~radial_read_3 radial_read_3 proc~read_radial_input->proc~radial_read_3 proc~radial_read_4 radial_read_4 proc~read_radial_input->proc~radial_read_4 proc~radial_read_5 radial_read_5 proc~read_radial_input->proc~radial_read_5 proc~radial_read_6 radial_read_6 proc~read_radial_input->proc~radial_read_6 proc~read_scan_input->proc~get_indexed_namelist_unit proc~read_scan_input->proc~get_runname proc~read_scan_input->proc~get_unused_unit proc~scan_read scan_read proc~read_scan_input->proc~scan_read proc~bess0_s_prime bess0_s_prime proc~calc_fs1->proc~bess0_s_prime proc~bessj_s bessj_s proc~calc_fs1->proc~bessj_s proc~wparth_from_ratio wparth_from_ratio proc~calc_wparth->proc~wparth_from_ratio proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist proc~bess0_s_prime->proc~bessj_s proc~bessj0 bessj0 proc~bessj_s->proc~bessj0 proc~bessj1 bessj1 proc~bessj_s->proc~bessj1 proc~wparth_from_ratio->proc~calc_fs1 proc~wparth_from_ratio->proc~fs0hat interface~poly poly proc~bessj0->interface~poly proc~bessj1->interface~poly proc~poly_cc poly_cc interface~poly->proc~poly_cc proc~poly_dd poly_dd interface~poly->proc~poly_dd proc~poly_ddv poly_ddv interface~poly->proc~poly_ddv proc~poly_msk_ddv poly_msk_ddv interface~poly->proc~poly_msk_ddv proc~poly_msk_rrv poly_msk_rrv interface~poly->proc~poly_msk_rrv proc~poly_rc poly_rc interface~poly->proc~poly_rc proc~poly_rr poly_rr interface~poly->proc~poly_rr proc~poly_rrv poly_rrv interface~poly->proc~poly_rrv proc~poly_ddv->proc~poly_dd proc~poly_msk_ddv->proc~poly_ddv proc~poly_msk_rrv->proc~poly_rrv proc~poly_rrv->proc~poly_rr Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Attributes Name Initial integer :: is Index for looping through parametric variations with om_scan . integer :: iroot Index for making many JET-PLUME signatures for each root","tags":"","url":"program/plume.html"},{"title":"  params – PLUME\n","text":"Variables Name Type Default Description betap real None Reference Species Parallel Thermal-to-Magnetic Pressure Ratio.\n8 pi n_ref T_ref,par/B&#94;2 kperp real None Wavenumber perpendicular to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_perp,ref/Omega_ref kpar real None Wavenumber parallel to B0, normalized to reference gyroradius.\nk_perp rho_ref = k_perp w_t,ref,perp/Omega_ref vtp real None Parallel reference thermal velocity normalized to the speed of light.\nv_t,ref,par/c nspec integer None Number of species/components to be included in calculation. nscan integer 0 Number of parameter scans. option integer None Selection for the type of dispersion calculation to be undertaken.\n-1: Calculate disp(om) at a single (omega, gamma)\n 0: Calculate Roots for input plasma parameters.\n 1: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over plasma parameters, with range and type specified in .in file.\n 2: Calculate Roots for input plasma parameters or Reads in root value\n    and then scan over two-dimensional plasma parameters space,\n    with range and type specified in .in file.\n 3: deprecated\n 4: Make multiple maps of complex frequency space.\n 5: Find roots for parameters along a prescribed path\n    Path is set by solar wind models, with values calculated and\n    output by helper function (in development, the radial scan function.). nroot_max integer None Input specified nroots to follow. use_map logical None Determines method for selecting initial solutions.\nT-> Use map routine to determine solutions in defined regions of complex frequency space.\n    Map parameters determined by &maps list in .in file.\nF-> Read nroot_max initial guesses for complex frequency solutions.\n    Guesses determined by &guess_N lists in .in file. low_n logical .true. Toggle on low-n susceptibility suplementary calculation. new_low_n logical .true. Flag to use Revised low_n for LD/TTD separation. This modifies the Collisionless Power Absorption Calculation! IF TRUE THEN low_n MUST BE TRUE TOO! (GGH: 1/18/23) writeOut logical None Enables or suppressed output to screen. dataName character(len=100) None Data Subdirectory where output is stored. outputName character(len=100) None Common name string for output files.","tags":"","url":"namelist/params.html"},{"title":"  fpc – PLUME\n","text":"Variables Name Type Default Description vperpmin real None vperpmax real None vparmin real None vparmax real None delv real None vxmin real None vxmax real None vymin real None vymax real None vzmin real None vzmax real None elecdircontribution real None","tags":"","url":"namelist/fpc.html"},{"title":"  species – PLUME\n","text":"Variables Name Type Default Description tauS real None Parallel Temperature Ratio. muS real None Mass Ratio. alphS real None Temperature Anisotropy. Qs real None Relative charge ratio. Ds real None Density Ratio. vvS real None Relative Drift, normalized to reference Alfven velocity with .","tags":"","url":"namelist/species.html"},{"title":"  maps – PLUME\n","text":"Variables Name Type Default Description loggridw logical None Set log or linear spacing for real frequency axis of the map search. loggridg logical None Set log or linear spacing for imaginary frequency axis of the map search. omi real None Lower bound on real frequency map search axis. omf real None Upper bound on real frequency map search axis. gami real None Lower bound on imaginary frequency map search axis. gamf real None Upper bound on imaginary frequency map search axis. positive_roots logical .false. Consider all solutions (false) or only solutions with positive real frequencies (true). nr integer 128 Number of grid points along real frequency axis\n Now read in by map_read ni integer 128 Number of grid points along imaginary frequency axis\n Now read in by map_read","tags":"","url":"namelist/maps.html"},{"title":"  scan_input – PLUME\n","text":"Variables Name Type Default Description scan_type integer None Defines kind of parameter scans. swi real None Initial value of scanned parameter. swf real None Final value of scanned parameter. swlog logical None Linear or Logarithmic scan. scan_style integer None Defines number of components of scan. ns integer None Number of output steps. nres integer None Scan resolution between output steps. heating logical None Controls supplementary heating calculation. eigen logical None Controls supplementary eigenfunction calculation. tensor logical None Controls supplementary output of susceptibility tensor.","tags":"","url":"namelist/scan_input.html"},{"title":"  guess – PLUME\n","text":"Variables Name Type Default Description g_om real None Dummy values for real frequency component of solution. g_gam real None Dummy values for imaginary frequency component of solution.","tags":"","url":"namelist/guess.html"},{"title":"  radial_input – PLUME\n","text":"Variables Name Type Default Description nRad integer None Number of points to scan in radial models. modelName character(len=100) None Input file name for radial model radial_heating logical None radial_eigen logical None k_scan integer None Determines wavevector values to include in radial scan\n0: single point in kperp, kpar space\n1: fixed kperp, scan over kpar\n2: fixed kpar,  scan over kperp\n3: fixed theta, scan over k\n4: fixed k, scan over theta\n5: plane scan over (kperp, kpar)\n6: plane scan over (k, theta)","tags":"","url":"namelist/radial_input.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for readin.","tags":"","url":"namelist/k_range.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for readin. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"namelist/k_range~2.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for fixed . nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"namelist/k_range~3.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for fixed value (in deg.) nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"namelist/k_range~4.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description k_1 real None Dummy variable for fixed value. theta_1 real None Dummy variable for initial value (in deg.). theta_2 real None Dummy variable for final value (in deg.). nK integer None Number of output values. kres integer None Number of steps between output values. rad_log logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"namelist/k_range~5.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description kperp_1 real None Dummy variable for initial value. kperp_2 real None Dummy variable for final value. kpar_1 real None Dummy variable for initial value. kpar_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. nK2 integer None Number of output values. kres2 integer None Number of steps between output values. rad_log_perp logical None Logirithmic or linear scan. rad_log_par logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"namelist/k_range~6.html"},{"title":"  k_range – PLUME\n","text":"Variables Name Type Default Description k_1 real None Dummy variable for initial value. k_2 real None Dummy variable for final value. theta_1 real None Dummy variable for initial value. theta_2 real None Dummy variable for final value. nK integer None Number of output values. kres integer None Number of steps between output values. ntheta integer None Number of output values. thetares integer None Number of steps between output values. rad_log_k logical None Logirithmic or linear scan. rad_log_theta logical None Logirithmic or linear scan. rad_heat logical None True turns on supplemental heating calculation. rad_eigen logical None True turns on supplemental eigenfunction calculation.","tags":"","url":"namelist/k_range~7.html"},{"title":"Readme – PLUME","text":"PLUME: Plasma in a Linear Uniform Magnetized Environment This is the PLUME code: Plasma in a Linear Uniform Magnetized Environment. Authors Kristopher Klein   (kgklein@arizona.edu)\nGregory Howes      (gregory-howes@uiowa.edu)\nCollin Brown       (collin.crbrown@gmail.com) Contents What is PLUME? Acknowledgements Installing the PLUME Code Running the PLUME Code JET-PLUME License 1. What is PLUME? Plasma in a Linear Uniform Magnetized Environment (PLUME) is a numerical code that solves the Vlasov-Maxwell dispersion relation in a hot magnetised plasma.\nPLUME allows for any number of particle species or components, assuming each can be described by a bi-Maxwellian distribution with a defined density, velocity parallel to the mean magnetic fiedl, and parallel and perpendicular temperatures.\nThe solver is able to identify supported waves with any direction of propagation with respect to the background magnetic field.\nThis code is based upon a F90 adaptation by Greg Howes of a solver originally by Eliot Quataert. The calculation follows Stix 'Waves in Plasmas' Chapter 10, Eqns. 66-73.\nThe dispersion relation for $\\omega/\\Omega_{ref}$ is dependent on four global dimensionless parameters: Reference plasma beta: $\\beta_{\\parallel,\\mathrm{ref}} = \\frac{8 \\pi n_{\\mathrm{ref}} T_{\\parallel,\\mathrm{ref}}}{B&#94;2}$ Perpendicular wavevector: $k_\\perp \\rho_{ref}$ Parallel wavevector: $k_\\parallel \\rho_{ref}$ Parallel reference thermal velocity: $\\sqrt{2 T_{\\parallel,ref}/m_{ref}}/c$ and six dimensionless parameters for component $s$: Parallel Temperature Ratio: $T_{\\parallel,ref}/T_{\\parallel,s}$ Mass Ratio: $m_{ref}/m_{s}$ Temperature Anisotropy: $T_{\\perp}/T_{\\parallel}|s$ Charge Ratio: $q_{ref}/q_{s}$ Density Ratio: $n_{s}/n_{ref}$ Relative Velocity: $v_{s,drift}/v_{A,ref}$ The code then varies defined parameters to construct dispersion relations as a function of wavevector $(k_\\perp \\rho_{ref},k_\\parallel \\rho_{ref})$ or plasma parameters for the identified solutions. Supplementary calculation of the associated heating rates or eigenfunctions can also be calculated. 2. Acknowledgements If you use the code for a science publication,\n1. please provide the code website github.com/kgklein/PLUME in the acknowledgements, cite the DOI of the code: @software { PLUME_2025 , author = {{ Klein } , K . G . and { Howes } , G . G . } , title = { kgklein / PLUME : Zenodo release } , month = April , year = 2025 , publisher = { Zenodo } , version = { v1 .0.1 } , doi = { 10.5281 / zenodo .15215514 } , url = { https : // doi . org / 10.5281 / zenodo .15215514 } } and cite the code paper: Klein, K. G., Howes, G. G.,\nand Brown, C. R.: PLUME: Plasma in a Linear Uniform Magnetized Environment, RNAAS, 2025 3. Installing the PLUME code For advice on the installation of the code, please check INSTALL.md . 4. Running the PLUME code There are two ways to run PLUME Command line: The first way is to use the command line. PLUME works with input files that specify the plasma and numerical parameters for the calculation.\nDetails on the input parameters can be found in input.md . The values for the plasma parameters are extracted from *.in file, appended after the executable program call, e.g. ./plume.e inputs/example/run_example.in A tutorial on running PLUME can be found in tutorial.md .\nDetails on the outputs of the code can be found in output.md . Python wrapper: The second way is to use the python wrapper, which simply helps one write inputs, call the code using the command line, and load the data into python variables. One way to use the python wrapper is with jupyter notebook (to install, see here ). To do so, call jupyter notebook, jupyter notebook and navigate to and open the examplelinfpc.ipynb notebook. This notebook shows how to use the main functions of both PLUME and JET-PLUME. 5. JET-PLUME JET-PLUME is an extension to PLUME that predicts wave-particle energy transfer in velocity space using the field-particle correlation technique and linear theory. Please see the README for JET-PLUME . JET-PLUME is automatically installed with PLUME. It's inclusion has no impact on the use of PLUME. If you use JET-PLUME (i.e. not just PLUME) for a science publication, please follow the directions in the Acknowledgements section above AND in the Acknowledgements of your publication and cite the paper for JET-PLUME: [... Work in Progress] With the creation of JET-PLUME, a wrapper to use PLUME and JET-PLUME in a jupyter notebook was created. It aids in the creation of input files and running of the code with said input files. Please see the example notebook to see the key features of this wrapper. The use of the wrapper is entirely optional. NOTE: Please create and run notebooks from the main directory of the repository. This is necessary because the notebooks import key functions directly from the linfpclib module located there. JET-PLUME is operated in a similar manner to PLUME, either using command line or the python wrapper. See Section 4 above on how to operate and README for JET-PLUME for the additional inputs. 6. License BSD 2-Clause License Copyright (c) 2025, Kristopher G. Klein and Gregory G. Howes and Collin R. Brown\nAll rights reserved. Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","tags":"","url":"page/index.html"},{"title":"Installing PLUME – PLUME","text":"PLUME: Plasma in a Linear Uniform Magnetized Environment These are the install instructions for the PLUME code: the Plasma in a Linear Uniform Magnetized Environment. Authors Kristopher Klein   (kgklein@arizona.edu)\nGregory Howes      (gregory-howes@uiowa.edu) CONTENTS Requirements and Dependencies Getting the PLUME Code Installing the PLUME Code Execution of Test Runs REQUIREMENTS AND DEPENDENCIES PLUME has the following requirements: A UNIX, Linux, or macOS operating system with a working shell. GNU make. Fortran 90 compiler (e.g., gfortran) - we recommend using the latest version\n  of the compiler to avoid any surprises in the evaluation. GETTING THE PLUME CODE We recommend pulling the latest version of PLUME from GitHub. For this, go to\nthe directory where you want to install PLUME and execute the following command: git clone https://github.com/kgklein/PLUME.git Alternatively, you can also go to the website https://https://github.com/kgklein/PLUME directly and download the source code from there. The advantage of using the git\ncommand is that you can now contribute to the development of the PLUME code. If\nyou make any changes to the code, GitHub will run automatic tests (via workflows)\nto ensure that the changes do not break the code. INSTALLING THE PLUME CODE There are no additional dependencies for compiling the code, so running make should be sufficent if using gfortran.\nIf using another FORTRAN90 compiler, simply add that compiler to the Makefile and compile. Running make tidyup will move the extraneous .o and .mod files to the include directory. If you need a clean compilations , run make clean This will remove all of the files from the include directory as well as the compiled executable, enabling a clean recompilation if necessary. EXECUTION OF TEST RUNS PLUME comes with a selection of test runs that cycle through various test\nproblems.\nTo execute a small set of tests, navigate to inputs/example/ and execute the following shell script: ./run_example.sh This script will run a simple parallel wavevector scan after identifying four modes at MHD length scales. More example cases will be added. Building the documentation PLUME uses Ford to build its documentation. The documentation is automatically built and deployed to github.io by the doc workflow . To build the documentation locally, follow the Build documentation step in the workflow, summarized here:\n1. Install ford by e.g. pip install ford . See Ford documentation for details\n2. Create a docs directory by mkdir docs 3. Add a line title: Readme to the top of README.md and copy it to docs/index.md 4. Add a line title: Install to the top of INSTALL.md and copy it to docs/INSTALL.md 5. Run ford ford_project.md 6. Open docs/index.html in a browser to view the documentation Adding static pages to documentation The README.md and INSTALL.md files are added to the Ford documentation as static pages. You can add more static pages to the documentation by\n1. Add the content in a markdown file to the repository.\n2. Add a title: line to the beginning of the file and copy it to docs/ in the doc workflow . See steps 3-4 in the previous section, or the Build documentation step in the workflow.\n3. Add the name of the markdown file as a new line under ordered_subpage in ford_project.md","tags":"","url":"page/INSTALL.html"},{"title":"Papers citing PLUME – PLUME","text":"Papers citing PLUME 2025 Bai, W., Xie, H., et al., BO-KM: A comprehensive solver for dispersion relation of obliquely propagating waves in magnetized multi-species plasma with anisotropic drift kappa-Maxwellian distribution , Computer Physics Communications 307, 109434, 2025, 10.1016/j.cpc.2024.109434 Klein, K. G., Howes, G. G., & Brown, C. R., PLUME: Plasma in a Linear Uniform Magnetized Environment , Research Notes of the American Astronomical Society 9, 102, 2025, 10.3847/2515-5172/add1c2 Klein, K., & Verscharen, D., The Dielectric Response of Plasmas with Arbitrary Gyrotropic Velocity Distributions , arXiv e-prints , arXiv:2506.16431, 2025, 10.48550/arXiv.2506.16431 Kumbhar, K., Raghav, A., et al., Kinetic instabilities constraining proton temperature anisotropy in corotating interaction regions at 1 AU , Advances in Space Research 76, 1060, 2025, 10.1016/j.asr.2025.05.007 Lichko, E., Caprioli, D., et al., Understanding Streaming Instabilities in the Limit of High Cosmic-Ray Current Density , The Astrophysical Journal 980, 240, 2025, 10.3847/1538-4357/adadf5 Martinović, M. M., Klein, K. G., et al., Impact of Two-population α-particle Distributions on Plasma Stability , The Astrophysical Journal 988, L25, 2025, 10.3847/2041-8213/adeaac Noh, S. J., Fu, X., et al., Simultaneous Observation of Ion-scale Wave Packets with Opposite Polarizations and Their Implications on the Generation Region in the Inner Heliosphere , The Astrophysical Journal 985, 249, 2025, 10.3847/1538-4357/adcd66 Ofman, L., Yogesh, et al., Modeling Hot, Anisotropic Ion Beams in the Solar Wind Motivated by the Parker Solar Probe Observations near Perihelia. , The Astrophysical Journal 984, 174, 2025, 10.48550/arXiv.2504.00659 Sadykov, V. M., Ofman, L., et al., Identification of Ion-kinetic Instabilities in Hybrid-PIC Simulations of Solar Wind Plasma with Machine Learning , The Astrophysical Journal Supplement Series 279, 28, 2025, 10.3847/1538-4365/addd07 Yogesh, Ofman, L., et al., Evidence of Interaction between Ion-scale Waves and Ion Velocity Distributions in the Solar Wind , The Astrophysical Journal 986, 119, 2025, 10.3847/1538-4357/add467 2024 Achikanath Chirakkara, R., Federrath, C., & Seta, A., AHKASH: a new Hybrid particle-in-cell code for simulations of astrophysical collisionless plasma , Monthly Notices of the Royal Astronomical Society 534, 3761, 2024, 10.1093/mnras/stae2188 Afshari, A. S., Howes, G. G., et al., Direct observation of ion cyclotron damping of turbulence in Earth's magnetosheath plasma , Nature Communications 15, 7870, 2024, 10.1038/s41467-024-52125-8 Conley, S. A., Juno, J., et al., The kinetic analog of the pressure-strain interaction , Physics of Plasmas 31, 122117, 2024, 10.1063/5.0231200 Conley, S. A., Juno, J., et al., The Kinetic Analogue of the Pressure-Strain Interaction , arXiv e-prints , arXiv:2408.06508, 2024, 10.48550/arXiv.2408.06508 Di Mare, F., & Howes, G. G., New Regime of Inertial Alfvén Wave Turbulence in the Auroral Ionosphere , Physical Review Letters 133, 045201, 2024, 10.1103/PhysRevLett.133.045201 Howes, G. G., The fundamental parameters of astrophysical plasma turbulence and its dissipation: non-relativistic limit , Journal of Plasma Physics 90, 905900504, 2024, 10.1017/S0022377824001090 Huang, R., Howes, G. G., & McCubbin, A. J., The velocity-space signature of transit-time damping , Journal of Plasma Physics 90, 535900401, 2024, 10.1017/S0022377824000667 Klein, K. G., Broeren, T., et al., Wave-Telescope Analysis for Multipoint Observatories: Impact of Timing and Spatial Uncertainties , Journal of Geophysical Research (Space Physics) 129, 2024JA033428, 2024, 10.1029/2024JA033428 Liu, W., Zhao, J.-S., et al., Electromagnetic Ion Beam Instability in the Solar Corona , Research in Astronomy and Astrophysics 24, 025014, 2024, 10.1088/1674-4527/ad1bd6 McManus, M. D., Klein, K. G., et al., Proton- and Alpha-driven Instabilities in an Ion Cyclotron Wave Event , The Astrophysical Journal 961, 142, 2024, 10.3847/1538-4357/ad05ba Ramzan, S., Abbas, G., et al., Effects of temperature anisotropy on the flow-driven Alfvén wave instabilities in interpenetrating plasmas , Physics of Plasmas 31, 122116, 2024, 10.1063/5.0226851 Shaikh, Z. I., Verscharen, D., et al., Anisotropic Heating and Cooling within Interplanetary Coronal Mass Ejection Sheath Plasma , The Astrophysical Journal 974, 249, 2024, 10.3847/1538-4357/ad782b Shankarappa, N., Klein, K. G., et al., Estimated Heating Rates Due to Cyclotron Damping of Ion-scale Waves Observed by the Parker Solar Probe , The Astrophysical Journal 973, 20, 2024, 10.3847/1538-4357/ad5f2a Walters, J., Klein, K. G., et al., Electron Influence on the Parallel Proton Firehose Instability in 10-moment, Multifluid Simulations , The Astrophysical Journal 975, 290, 2024, 10.3847/1538-4357/ad7c47 Xiang, L., Lee, K. H., et al., Triggered Emissions of Kinetic Alfvén Waves and Parallel Ion Cyclotron Waves by Ion Beam Mode in the Solar Wind , The Astrophysical Journal 976, 184, 2024, 10.3847/1538-4357/ad88f2 Xiang, L., Lee, K. H., et al., Proton Temperature Anisotropy Constraint Associated With Alpha Beam Instability in the Solar Wind , Journal of Geophysical Research (Space Physics) 129, e2023JA032398, 2024, 10.1029/2023JA032398 2023 Brown, C. R., Juno, J., et al., Isolation and phase-space energization analysis of the instabilities in collisionless shocks , Journal of Plasma Physics 89, 905890308, 2023, 10.1017/S0022377823000478 Califano, F., & Cerri, S. S., Eulerian Approach to Solve the Vlasov Equation and Hybrid-Vlasov Simulations , Space and Astrophysical Plasma Simulation. Methods, Algorithms, and Applications , 123, 2023, 10.1007/978-3-031-11870-8_5 Conley, S. A., Howes, G. G., & McCubbin, A. J., Characterizing the velocity-space signature of electron Landau damping , Journal of Plasma Physics 89, 905890514, 2023, 10.1017/S0022377823001046 Martinović, M. M., & Klein, K. G., Ion-driven Instabilities in the Inner Heliosphere. II. Classification and Multidimensional Mapping , The Astrophysical Journal 952, 14, 2023, 10.3847/1538-4357/acdb79 Walters, J., Klein, K. G., et al., The Effects of Nonequilibrium Velocity Distributions on Alfvén Ion-cyclotron Waves in the Solar Wind , The Astrophysical Journal 955, 97, 2023, 10.3847/1538-4357/acf1fa Xiang, L., Wu, D. J., et al., Instabilities Driven by Proton Temperature Anisotropy in the Presence of Alpha Particles: Implications for Proton-temperature-anisotropy Constraint in the Solar Wind , The Astrophysical Journal 954, 42, 2023, 10.3847/1538-4357/ace7c9 2022 Artemyev, A. V., Shi, C., et al., Ion Kinetics of Plasma Flows: Earth's Magnetosheath versus Solar Wind , The Astrophysical Journal 939, 85, 2022, 10.3847/1538-4357/ac96e4 Horvath, S. A., Howes, G. G., & McCubbin, A. J., Observing particle energization above the Nyquist frequency: An application of the field-particle correlation technique , Physics of Plasmas 29, 062901, 2022, 10.1063/5.0092342 Lang, S.-Y., Xiang, L., et al., Electron Temperature Anisotropy Effects on Alpha/Proton Instability in the Solar Wind , Universe 8, 466, 2022, 10.3390/universe8090466 Verniero, J. L., Chandran, B. D. G., et al., Strong Perpendicular Velocity-space Diffusion in Proton Beams Observed by Parker Solar Probe , The Astrophysical Journal 924, 112, 2022, 10.3847/1538-4357/ac36d5 2021 Bott, A. F. A., Arzamasskiy, L., et al., Adaptive Critical Balance and Firehose Instability in an Expanding, Turbulent, Collisionless Plasma , The Astrophysical Journal 922, L35, 2021, 10.3847/2041-8213/ac37c2 Klein, K. G., Verniero, J. L., et al., Inferred Linear Stability of Parker Solar Probe Observations Using One- and Two-component Proton Distributions , The Astrophysical Journal 909, 7, 2021, 10.3847/1538-4357/abd7a0 Lentz, C. L., Chasapis, A., et al., On the Solar Wind Proton Temperature Anisotropy at Mars' Orbital Location , Journal of Geophysical Research (Space Physics) 126, e29438, 2021, 10.1029/2021JA02943810.1002/essoar.10506890.1 Martinović, M. M., Klein, K. G., et al., Ion-driven Instabilities in the Inner Heliosphere. I. Statistical Trends , The Astrophysical Journal 923, 116, 2021, 10.3847/1538-4357/ac3081 Schroeder, J. W. R., Howes, G. G., et al., Laboratory measurements of the physics of auroral electron acceleration by Alfvén waves , Nature Communications 12, 3103, 2021, 10.1038/s41467-021-23377-5 Vech, D., Martinović, M. M., et al., Wave-particle energy transfer directly observed in an ion cyclotron wave , Astronomy and Astrophysics 650, A10, 2021, 10.1051/0004-6361/202039296 Woodham, L. D., Wicks, R. T., et al., Dependence of Solar Wind Proton Temperature on the Polarization Properties of Alfvénic Fluctuations at Ion-kinetic Scales , The Astrophysical Journal 912, 101, 2021, 10.3847/1538-4357/abed51 2020 Qudsi, R. A., Maruca, B. A., et al., Observations of Heating along Intermittent Structures in the Inner Heliosphere from PSP Data , The Astrophysical Journal Supplement Series 246, 46, 2020, 10.3847/1538-4365/ab5c19 Telloni, D., Bruno, R., et al., Wave-polarization Analysis of the Alfvénic Slow Solar Wind at Kinetic Scales , The Astrophysical Journal 897, 167, 2020, 10.3847/1538-4357/ab980a Verniero, J. L., Larson, D. E., et al., Parker Solar Probe Observations of Proton Beams Simultaneous with Ion-scale Waves , The Astrophysical Journal Supplement Series 248, 5, 2020, 10.3847/1538-4365/ab86af Verscharen, D., Parashar, T. N., et al., Dependence of kinetic plasma waves on ion-to-electron mass ratio and light-to-Alfvén speed ratio , Monthly Notices of the Royal Astronomical Society 494, 2905, 2020, 10.1093/mnras/staa977 2019 Chen, C. H. K., Klein, K. G., & Howes, G. G., Evidence for electron Landau damping in space plasma turbulence , Nature Communications 10, 740, 2019, 10.1038/s41467-019-08435-3 Hellinger, P., Matteini, L., et al., Turbulence versus Fire-hose Instabilities: 3D Hybrid Expanding Box Simulations , The Astrophysical Journal 883, 178, 2019, 10.3847/1538-4357/ab3e01 Klein, K. G., Martinović, M., et al., Linear Stability in the Inner Heliosphere: Helios Re-evaluated , The Astrophysical Journal 887, 234, 2019, 10.3847/1538-4357/ab5802 Kunz, M. W., Squire, J., et al., [Plasma 2020 Decadal] The Material Properties of Weakly Collisional, High-Beta Plasmas , arXiv e-prints , arXiv:1903.04080, 2019, 10.48550/arXiv.1903.04080 Sharma Pyakurel, P., Shay, M. A., et al., Transition from ion-coupled to electron-only reconnection: Basic physics and implications for plasma turbulence , Physics of Plasmas 26, 082307, 2019, 10.1063/1.5090403 Sun, H., Zhao, J., et al., On Kinetic Instabilities Driven By Ion Temperature Anisotropy and Differential Flow in the Solar Wind , The Astrophysical Journal 884, 44, 2019, 10.3847/1538-4357/ab3dad Verscharen, D., Klein, K. G., & Maruca, B. A., The multi-scale nature of the solar wind , Living Reviews in Solar Physics 16, 5, 2019, 10.1007/s41116-019-0021-0 Woodham, L. D., Wicks, R. T., et al., Parallel-propagating Fluctuations at Proton-kinetic Scales in the Solar Wind Are Dominated By Kinetic Instabilities , The Astrophysical Journal 884, L53, 2019, 10.3847/2041-8213/ab4adc 2018 Hoppock, I. W., Chandran, B. D. G., et al., Stochastic proton heating by kinetic-Alfvén-wave turbulence in moderately high-β plasmas , Journal of Plasma Physics 84, 905840615, 2018, 10.1017/S0022377818001277 Howes, G. G., Laboratory space physics: Investigating the physics of space plasmas in the laboratory , Physics of Plasmas 25, 055501, 2018, 10.1063/1.5025421 Howes, G. G., McCubbin, A. J., & Klein, K. G., Spatially localized particle energization by Landau damping in current sheets produced by strong Alfvén wave collisions , Journal of Plasma Physics 84, 905840105, 2018, 10.1017/S0022377818000053 Klein, K. G., Alterman, B. L., et al., Majority of Solar Wind Intervals Support Ion-Driven Instabilities , Physical Review Letters 120, 205102, 2018, 10.1103/PhysRevLett.120.205102 Kunz, M. W., Abel, I. G., et al., Astrophysical gyrokinetics: turbulence in pressure-anisotropic plasmas at ion scales and beyond , Journal of Plasma Physics 84, 715840201, 2018, 10.1017/S0022377818000296 Maruca, B. A., Chasapis, A., et al., MMS Observations of Beta-dependent Constraints on Ion Temperature Anisotropy in Earth’s Magnetosheath , The Astrophysical Journal 866, 25, 2018, 10.3847/1538-4357/aaddfb Meneses, A. R., Gaelzer, R., & Ziebell, L. F., The oblique firehose instability in a bi-kappa magnetized plasma , Physics of Plasmas 25, 112901, 2018, 10.1063/1.5063537 Ramires Meneses, A., Gaelzer, R., & Ziebell, L. F., The oblique firehose instability in a bi-kappa magnetized plasma , arXiv e-prints , arXiv:1809.10597, 2018, 10.48550/arXiv.1809.10597 Vech, D., Mallet, A., et al., Magnetic Reconnection May Control the Ion-scale Spectral Break of Solar Wind Turbulence , The Astrophysical Journal 855, L27, 2018, 10.3847/2041-8213/aab351 Verscharen, D., Klein, K. G., et al., ALPS: the Arbitrary Linear Plasma Solver , Journal of Plasma Physics 84, 905840403, 2018, 10.1017/S0022377818000739 2017 Hunana, P., & Zank, G. P., On the Parallel and Oblique Firehose Instability in Fluid Models , The Astrophysical Journal 839, 13, 2017, 10.3847/1538-4357/aa64e3 Klein, K. G., Howes, G. G., & Tenbarge, J. M., Diagnosing collisionless energy transfer using field-particle correlations: gyrokinetic turbulence , Journal of Plasma Physics 83, 535830401, 2017, 10.1017/S0022377817000563 Klein, K. G., Kasper, J. C., et al., Applying Nyquist's method for stability determination to solar wind observations , Journal of Geophysical Research (Space Physics) 122, 9815, 2017, 10.1002/2017JA024486 Lacombe, C., Alexandrova, O., & Matteini, L., Anisotropies of the Magnetic Field Fluctuations at Kinetic Scales in the Solar Wind: Cluster Observations , The Astrophysical Journal 848, 45, 2017, 10.3847/1538-4357/aa8c06 Porazik, P., & Johnson, J. R., Conductivity tensor for anisotropic plasma in gyrokinetic theory , Physics of Plasmas 24, 052121, 2017, 10.1063/1.4983318 Squire, J., Kunz, M. W., et al., Kinetic Simulations of the Interruption of Large-Amplitude Shear-Alfvén Waves in a High-β Plasma , Physical Review Letters 119, 155101, 2017, 10.1103/PhysRevLett.119.155101 Squire, J., Schekochihin, A. A., & Quataert, E., Amplitude limits and nonlinear damping of shear-Alfvén waves in high-beta low-collisionality plasmas , New Journal of Physics 19, 055005, 2017, 10.1088/1367-2630/aa6bb1 2016 Chen, C. H. K., Matteini, L., et al., Multi-species Measurements of the Firehose and Mirror Instability Thresholds in the Solar Wind , The Astrophysical Journal 825, L26, 2016, 10.3847/2041-8205/825/2/L26 Gaelzer, R., Ziebell, L. F., & Meneses, A. R., The general dielectric tensor for bi-kappa magnetized plasmas , Physics of Plasmas 23, 062108, 2016, 10.1063/1.4953430 Verscharen, D., Chandran, B. D. G., et al., Collisionless Isotropization of the Solar-wind Protons by Compressive Fluctuations and Plasma Instabilities , The Astrophysical Journal 831, 128, 2016, 10.3847/0004-637X/831/2/128 2015 Howes, G. G., A dynamical model of plasma turbulence in the solar wind , Philosophical Transactions of the Royal Society of London Series A 373, 20140145, 2015, 10.1098/rsta.2014.0145 Klein, K. G., & Howes, G. G., Predicted impacts of proton temperature anisotropy on solar wind turbulence , Physics of Plasmas 22, 032903, 2015, 10.1063/1.4914933 2014 Klein, K. G., AGS-PRF: Understanding the Nature of Turbulent Fluctuations in the Near Sun Solar Wind , NSF Award 13, 31355, 2014,","tags":"","url":"page/citingpapers.html"},{"title":"PLUME Input – PLUME","text":"PLUME Input This is a reference for the key input parameters used by PLUME (currently editing). Namelists in input files. The following namelists and associated input parameters are read in by PLUME from the input file. &params General system parameters. betap Initial reference parallel plasma beta $\\beta_{ref,\\parallel} = 8 \\pi n_{ref} T_{ref,\\parallel}/B&#94;2$. kperp Initial perpendicular wavevector $k_{\\perp} \\rho_{ref}$. kpar Initial parallel wavevector $k_{\\parallel} \\rho_{ref}$. vtp Initial reference parallel thermal velocity, normalized to c $v_{t,ref,\\parallel}/c$. nspec Number of plasma species or components. nscan Number parameter or wavevector scans to execute. option Determines set of scans to perform. Choice of: -1: Calculate the value of the dispersion relation\n      at a single $(\\omega/\\Omega_{ref}, \\gamma/\\Omega_{ref})$ 0: Calculate Roots for input plasma parameters. 1: Calculate Roots for input plasma parameters or Reads in root value\n      and then scan over plasma parameters, with range and type specified in *.in file. 2: Calculate Roots for input plasma parameters or Reads in root value\n      and then scan over two-dimensional plasma parameters space,\n      with range and type specified in *.in file. 3: Deprecated... 4: Make multiple maps of complex frequency space. 5: Find roots for parameters along a prescribed path\n      Path is set by solar wind models, with values calculated and\n      output by helper function (in development, the radial scan function.). nroot_max Number of dispersion solutions to find and follow. use_map Choice of: True: Searching for roots over a map in complex frequency space (see &maps namelist). False: Input nroot_max guesses for solutions (see &guess_1 namelist). low_n Logical to toggle on or off outputing the $n=0$ and $\\pm 1$ resonances for\ncharacterizing heating channels. As made redundant by new_low_n , slated from removal. new_low_n New Logical to toggle on or off outputing the $n=0$ and $\\pm 1$ resonances for\ncharacterizing heating channels; correctly separates Landau, Transit, and Cyclotron damping. writeOut Write or suppress output to screen. dataName Subdirectory (below PLUME/data/) where outputs will be written. outputName String to be included in output files to identify specific run. &guess_m Initial guess of complex frequency for $m$th solution. Only used when use_map =.false. Need to have number of namelists equal to nroot_max . g_om Guess for real solution $\\omega_{r}/\\Omega_{ref} $. g_gam Guess for imaginary solution $\\gamma/\\Omega_{ref} $. &maps Range of complex frequencies for map_scan subroutine. Only used when use_map =.true. loggridw Linear (F) or Log (T) spacing for $\\omega_{r}/\\Omega_{p}$ map search.\nSpacing automatically calculated between omi and omf . loggridg Linear (F) or Log (T) spacing for $\\gamma/\\Omega_{p}$ map search.\nSpacing automatically calculated between gami and gamf omi Smallest $\\omega_{r}/\\Omega_{p}$ value for complex map search. omf Largest $\\omega_{r}/\\Omega_{p}$ value for complex map search. gami Smallest $\\gamma/\\Omega_{p}$ value for complex map search. gamf Largest $\\gamma/\\Omega_{p}$ value for complex map search. nr Number of $\\omega_{r}/\\Omega_{p}$ points in frequency grid.\nDefault is 128 if not specified. ni Number of $\\gamma/\\Omega_{p}$ points in frequency grid.\nDefault is 128 if not specified. positive_roots If true, the map routine will only select solutions with $\\omega_{|textrm{r}} \\ge 0$. &species_j Species or component parameters list for distribution $f_{j}$. tauS Relative parallel temperature $T_{ref,\\parallel}/T_{j,\\parallel}$. muS Relative mass $m_{ref}/m_{j}$. alphS Temperature anisotropy $T_{j,\\perp}/T_{j,\\parallel}$. Qs Relative charge $q_{ref}/q_{j}$. Ds Relative density $n_{j}/n_{ref}$. vvS Drift speed parallel to mean magnetic field, normalized to the reference Alfven velocity  $v_{j,drift}/v_{A,ref}$, where $v_{A,ref}=B/\\sqrt{4 \\pi n_{ref} m_{ref}}$ &scan_input_l Inputs for scanning parameter space for $l$th scan. scan_type Type of parameter scan. For scan_style =-1 (Global Two-Component Scan), options of:\n- 0: Scan from $\\textbf{k} 0 \\rho $ to $\\textbf{k} 1 \\rho $. Scans from current value of $(k_\\perp,k_\\parallel) \\rho_{ref}$ to $k_\\perp \\rho_p$= swi and $k_\\parallel \\rho_{ref}$= swf .\n- 1: Scan from $\\theta_0$ to $\\theta_1$ with fixed $|k|\\rho_{ref}$. Scans from current value of $(|k|\\rho_{ref},\\theta)$ to $(|k|\\rho_{ref},$ swi $)$, with swi in degrees.\n- 2: Scan from $|k| 1\\rho $ to $|k| 1\\rho $ with a fixed value of $\\theta$. Scan from current value of $(k_\\perp,k_\\parallel) \\rho_{ref}$ to $|k|\\rho_{ref}$= swf with constant $\\theta = \\atan (k_\\perp/k_\\parallel)$. For scan_style =0 (Global Scan), options of: 0: $k_\\perp \\rho_{ref}$ 1: $k_\\parallel \\rho_{ref}$ 2: $\\beta_{ref,\\parallel}$ 3: $v_{t,ref,\\parallel}/c$ swi and swf represent the initial and final scan values for scan_style =0. For scan_style =1- nspec (Parameter scan of component scan_style ), options of: 0: $T_{ref,\\parallel}/T_{j,\\parallel}$. 1: $m_{ref}/m_{j}$. 2: $T_{j,\\perp}/T_{j,\\parallel}$. 3: $q_{ref}/q_{j}$. 4: $n_{j}/n_{ref}$. 5: $v_{j,drift}/v_{A,ref}$. swi and swf represent the initial and final scan values for scan_style =1 through nspec . scan_style Class of parameter scan. Options of: -1: Global Two-Component Scan 0: Global Scan 1-nspec: Single-Parameter Scan swi Scan variable to define start of scan through parameter space. swf Scan variable to define end of scan through parameter space. swlog Use $\\log_{10}$ (T) or linear (F) spacing. ns Number of output scan values. nres Resolution between output scan values. heating Calculates heating rates if true. eigen Calculates eigenfunctions if true. tensor Outputs susceptibility tensor if true.","tags":"","url":"page/input.html"},{"title":"PLUME Output – PLUME","text":"PLUME Output PLUME writes output solutions to the /data directory, to the subdirectory specified by dataName .\nAll output file names will have the outputName string included in the name to distinguish between distinct calculations. dispersion_ outputName .map Value of the dispersion tensor $\\mathcal{\\Lambda}(\\omega_{\\textrm{r}},\\gamma)$ on a defined complex frequency grid. Solutions to the dispersion relation satisfy $|\\mathcal{\\Lambda}|  =0$.\nThis file is generated from the map_search subroutine in disprels.f90 , and invoked when use_map =.true. The data is ordered in columns as 1. $\\omega_r$ 2. $\\gamma$ 3. $\\log_{10} |\\mathcal{\\Lambda}|$ 4. Re $[|\\mathcal{\\Lambda}|]$ 5. Im $[|\\mathcal{\\Lambda}|]$ The &maps namelist in filename .in determines the structure of filename .map. The range of $\\omega_{\\textrm{r}}/\\Omega_p$ is from omi to omi with nr steps. Logorithmic or linear spacing is selected with loggridw . nr and ni are currently hardcoded. Will add as user options. The range of $\\gamma_{\\textrm{r}}/\\Omega_p$ is from gami to gami with ni steps. Logorithmic or linear spacing is selected with loggridg . dispersion_ outputName .roots Identified solutions to the dispersion relation $|\\mathcal{D}|  =0$, calculated using refine_guess in disprels.f90 . The data is ordered in columns as:\n1. $k_\\perp \\rho_{ref}$\n2. $k_\\parallel \\rho_{ref}$\n3. $\\beta_{ref,\\parallel}$\n4. $v_{t,ref,\\parallel}/c$\n5. $\\omega_{r}/\\Omega_{ref}$\n6. $\\gamma/\\Omega_{ref}$ This will be followed by 6 nspec columns containing the parameter lists $\\mathcal{P} j$ for each species or component.\n- $T /T_{j,\\parallel}$.\n- $m_{ref}/m_{j}$.\n- $T_{j,\\perp}/T_{j,\\parallel}$.\n- $q_{ref}/q_{j}$.\n- $n_{j}/n_{ref}$.\n- $v_{j,drift}/v_{A,ref}$. Only the first nroot_max solutions will be identified and written to file. outputName param range .modeN The dispersion relation calculated from om_scan will have different formats based upon the number of species as well as the suplementary calculations invoked. The param name will be assigned based on the kind of parameter scan performed, specifically: scan_style =-1: k for scan from $\\textbf{k} 0 \\rho $ to $\\textbf{k} 1 \\rho $ ( scan_type =0). theta for scan from $\\theta_0$ to $\\theta_1$ with fixed $|k|\\rho_{ref}$ ( scan_type =1). k_fixed_theta for scan from $|k| 1\\rho $ to $|k| 1\\rho $ with a fixed value of $\\theta$ ( scan_type =2). scan_style =0: kperp for scan of $k_\\perp \\rho_{ref}$ ( scan_type =0). kpar for scan of $k_\\parallel \\rho_{ref}$ ( scan_type =1). beta for scan of $\\beta_{ref,\\parallel}$ ( scan_type =2). vtp for scan of $v_{t,ref,\\parallel}/c$ ( scan_type =3). scan_style =1- nspec : tauS for scan of $T_{ref,\\parallel}/T_{j,\\parallel}$ ( scan_type =0). muS for scan of $m_{ref}/m_{j}$ ( scan_type =1). alphS for scan of $T_{j,\\perp}/T_{j,\\parallel}$ ( scan_type =2). qs for scan of $q_{ref}/q_{j}$ ( scan_type =3). Ds for scan of $n_{j}/n_{ref}$ ( scan_type =4). Vs for scan of $v_{j,drift}/v_{A,ref}$ ( scan_type =5). The initial and final values of the parameter scanned over will be reflected in the range portion of the file name. One file for each mode followed will be produced. The first six columns are the same regardless of supplemental calculations.\nThey are ordered as\n1. $k_\\perp \\rho_{ref}$\n2. $k_\\parallel \\rho_{ref}$\n3. $\\beta_{ref,\\parallel}$\n4. $v_{t,ref,\\parallel}/c$ (WARNING: prior non-public releases normalized this to the reference Alfven velocity)\n5. $\\omega_{\\textrm{r}}/\\Omega_{ref}$ 6. $\\gamma/\\Omega_{ref}$ If eigen is set to true, the next set of columns will be the eigenfluctuations, with fields normalized to $E_x$, velocity normalized to $c E_x/B_0$ and density normalized to $n_{0s} E_x/B_0$, Re $[B_x]$ Im $[B_x]$ Re $[B_y]$ Im $[B_y]$ Re $[B_z]$ Im $[B_z]$ Re $[E_x]$ Im $[E_x]$ Re $[E_y]$ Im $[E_y]$ Re $[E_z]$ Im $[E_z]$ [+6(j-1)] Re $[\\delta U_{x,j}]$ [+6(j-1)] Im $[\\delta U_{x,j}]$ [+6(j-1)] Re $[\\delta U_{y,j}]$ [+6(j-1)] Im $[\\delta U_{y,j}]$ [+6(j-1)] Re $[\\delta U_{z,j}]$ [+6(j-1)] Im $[\\delta U_{z,j}]$ [+6( nspec )+2(j-1)] Re $[\\delta n_{j}]$ [+6( nspec )+2(j-1)] Im $[\\delta n_{j}]$ where j ranges from 1 to nspec .\nThe normalization follows Eqns. 33-37 in Klein, K. G., Howes, G. G.,\nand Brown, C. R., 2025 If heat is set to true, the next set of columns will be the power absorption or emission from each component. If new_low_n is set to true, additional terms associated with Landau, Transit time, and Cyclotron heating will be output. If eigen is false, this data will start in the 7th column. If eigen is true, this data will start in the 18+8 nspec +1st column. If new_low_n is true, we have 18+(8-6{!eigen}) nspec +j. $P_j$ 18+(9-6{!eigen}) nspec +j. $P_j&#94;{yy}$ (Transit Time Damping term 1). 18+(10-6{!eigen}) nspec +j. $P_j&#94;{yz}$ (Transit Time Damping term 2). 18+(11-6{!eigen}) nspec +j. $P_j&#94;{zy}$ (Landau Damping term 1). 18+(12-6{!eigen}) nspec +j. $P_j&#94;{zz}$ (Landau Damping term 2). 18+(13-6{!eigen}) nspec +j. $P_j&#94;{n=0}$ (sum of Landau and Transit Time Damping). 18+(14-6{!eigen}) nspec +j. $P_j&#94;{n=\\pm 1}$ ($n=\\pm 1$ Cyclotron Damping).\nHere, {!eigen} (negation of eigen boolean) is equal to 1 if eigen is false and 0 if eigen is true. This will be followed by 6 nspec columns containing the parameter lists $\\mathcal{P} j$ for each species or component. \n- 19+ noutperspec nspec +6(j-1)-12({!eigen}). $T /T_{j,\\parallel}$.\n- 20+ noutperspec nspec +6(j-1)-12({!eigen}). $m_{ref}/m_{j}$.\n- 21+ noutperspec nspec +6(j-1)-12({!eigen}). $T_{j,\\perp}/T_{j,\\parallel}$.\n- 22+ noutperspec nspec +6(j-1)-12({!eigen}). $q_{ref}/q_{j}$.\n- 23+ noutperspec nspec +6(j-1)-12({!eigen}). $n_{j}/n_{ref}$.\n- 24+ noutperspec nspec +6(j-1)-12({!eigen}). $v_{j,drift}/v_{A,ref}$.\nHere, noutperspec = 0 is the number of additional outputs created by setting heating or eigen to true. If eigen and heating are false, then noutperspec = 7, if eigen is false and heating is true, then noutperspec = 8, and if eigen is true and if eigen and heating are true, then noutperspec=15. Note that {!eigen} (negation of eigen boolean) is equal to 1 if eigen is false and 0 if eigen is true. This same data structure is preserved for the output from om_double_scan .\nThe file naming convention will include a value of param from both of the two parameters scanned, and the code will not output information about the range of parameters in the file name.","tags":"","url":"page/output.html"},{"title":"PLUME Tutorial – PLUME","text":"PLUME Tutorial This is a tutorial for PLUME.\nIt will guide you through the setting up of some basic input files, the running of the code, and the basic output.\nFor more details, we refer to the PLUME Input page and the PLUME Output pages. Authors Kristopher Klein   (kgklein@arizona.edu) Gregory Howes      (gregory-howes@uiowa.edu) Contents Before getting started Installing PLUME Running PLUME 1. Before getting started Before starting with the steps described in this tutorial, we recommend that you familiarise yourself with the code paper. code paper here You don't need to go through all details, but it is certainly helpful to know what PLUME does and doesn't calculate.\nThe code paper also explains the numerical techniques used in the code.\nWe also recommend checking the Readme file. 2. Installing PLUME This tutorial assumes that you have a working copy of PLUME on your computer, including all the required dependencies. You can find the installation guide here . Make sure you have a version of PLUME that compiled completely without error messages after typing. make 3. Running PLUME For our first case, consider a simple scan over $k_\\parallel \\rho_{ref}$ for four solutions, the Slow, Alfven, Fast, and \"entropy\" (SAFE) modes. These modes will be identified first by a map scan over a prescribed range of complex frequencies, and then followed along a logirithmic scan of $k_\\parallel \\rho_{ref}$ values. ./plume.e inputs/example/example_map_par.in Additional cases go here","tags":"","url":"page/tutorial.html"}]}