READ ME File for waves.f90

Waves.f90 has four options to choose from.

--------------------------------------------------------------------------------
(Kristopher Klein, 2013)
--------------------------------------------------------------------------------

Two included modules which numerically solve the
Gyrokinetic (GK) and Vlasov-Maxwell (VM) dispersion relations,
for an isotropic Maxwellian distribution of electrons and
one ion species. Choose between the two systems using <sysopt>.

Recall the GK and VM use different normalizations; GK normalizes
frequencies by k_|| v_A, while VM uses Omega_i. You can convert
between the two with the factor k_||/sqrt(beta_i).

To compile, use the included makefile. type 'make neat' and
'make clean' to clean up old versions of the code, then 'make'
to compile a new executable. Run the code by typing

./waves.e relativepath/to/run.in

The code will take any file as an argument ending in .in

<option=-1> creates a map for the chosen dispersion surface over
a grid in complex frequency space- the subroutine used is
'map_out' found in waves_options.f90. The bounds on the frequencies
are set by <omi,omf,gami,gamf> in the input file.

The plasma parameters are also set with the input file.
Recall that

om_VM=om(beta_i,tau,kperp rho_i,kpar rho_i, mu, vti/c)

and

om_GK=om(beta_i,tau,kperp rho_i, mu, vti/c)

For the given set of plasma parameters
'map_out' calculates the dispersion relation at each point
on a grid over the desired range of real and imaginary frequencies.
The values of this calculation are output in 'roots.map'

In gnuplot:

set contour
unset surface
splot 'roots.map' u 3:4:5 w l

to see a contour plot of the frequency space. The routine
identifies the minima on this surface, which are the roots of the
system. These roots are listed in the output file 'roots_all.dat'.

In gnuplot:

plot 'roots_all.dat' u 7:8

<option=0> calculates the value of a particular roots as a function
of a changing parameter; the choices of swept parameter are listed
in the input file. Again, one must choose between VM and GK.
For the plasma parameters which are not being varied, their
values are given in the input file. The swept parameter
is varied logarithmically between <swi> and <swf> in <nsw> steps.

An initial guess for the solver must be provided. In waves, an
analytic expression for the Alfven root is hard coded as this guess-
Equation 62 from Howes et al 2006. Change the guess, or even use roots
from <option=-1>, by changing the 'sweep' subroutine in wave_options.f90.

Using the initial guess, the code uses a secant method algorithm to
calculate new frequency and eigenfunction values over the variation of
the given parameter.

The frequencies are output into 'sol.om' and eigenfunctions in 'sol.eig'

To replicate figs 3 and 4 in Howes et al 2006- which at present is the
whole point of using the linear dispersion solver- use gnuplot

set logscale
plot 'sol.om' u 2:8 w l

to get a plot of omega as a function of kperp rho_i.

Hope this helps. Ask if you have any questions-

--------------------------------------------------------------------------------
(Collin Brown, 2020)
--------------------------------------------------------------------------------
<option=3> generates velocity space signatures by calculating the correlation
between the parallel electric field and the distribution function. Computes
the distribution and electric field using the linearized gyrokinetic dispersion relation.

We assume alfven wave solutions for the dispersion relation
and eigenfunctions.

We consider only the Fourier at the solution frequency of the dispersion relation for the distribution function and the electric field when analyzing the correlation.

For the initial guess (described above), we assume omega_bar = sqrt[1.+kperp**2./sqrt(bi + 2./(1.+1./tau))](1-0.0001*i) where the variables names are the values passed in the input file.

<option=3> will generate five output files, the distribution function for ions/electrons, the first partial derivative w.r.t. v_par of the distribution function for ions/electrons, and the correlation as a function v_par and v_perp. The output file is formatted such that columns corresponds to values of v_par and rows corresponds to values of v_perp.

To visualize the correlation, use the python3 script makecmap by calling it with the relevant results file name as the first and only input parameter i.e.

./makecmap (*ion/elec*)_Ceparrunname

This will generate a contour map png file.

*Note: option 3 always uses the GK dispersion relation; The 'sysops' parameter is ignored*.
